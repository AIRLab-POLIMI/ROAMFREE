double tmp0 = x1(6+_OFF);
double tmp1 = x2(4+_OFF);
double tmp2 = x1(7+_OFF);
double tmp3 = x2(5+_OFF);
double tmp4 = x1(4+_OFF);
double tmp5 = x2(6+_OFF);
double tmp6 = x1(5+_OFF);
double tmp7 = x2(7+_OFF);
double tmp8 = std::pow(qOS1,2);
double tmp9 = -tmp8;
double tmp10 = std::pow(qOS2,2);
double tmp11 = -tmp10;
double tmp12 = std::pow(qOS3,2);
double tmp13 = -tmp12;
double tmp14 = 1 + tmp9 + tmp11 + tmp13;
double tmp15 = std::sqrt(tmp14);
double tmp16 = qOS1*tmp4;
double tmp17 = tmp15*tmp6;
double tmp18 = qOS3*tmp0;
double tmp19 = -(qOS2*tmp2);
double tmp20 = tmp16 + tmp17 + tmp18 + tmp19;
double tmp21 = qOS2*tmp1;
double tmp22 = -(qOS1*tmp7);
double tmp23 = qOS2*tmp4;
double tmp24 = -(qOS3*tmp6);
double tmp25 = tmp15*tmp0;
double tmp26 = qOS1*tmp2;
double tmp27 = tmp23 + tmp24 + tmp25 + tmp26;
double tmp28 = tmp15*tmp3;
double tmp29 = -(qOS3*tmp5);
double tmp30 = qOS3*tmp4;
double tmp31 = qOS2*tmp6;
double tmp32 = -(qOS1*tmp0);
double tmp33 = tmp15*tmp2;
double tmp34 = tmp30 + tmp31 + tmp32 + tmp33;
double tmp35 = -(qOS1*tmp3);
double tmp36 = qOS2*tmp5;
double tmp37 = tmp15*tmp4;
double tmp38 = -(qOS1*tmp6);
double tmp39 = -(qOS2*tmp0);
double tmp40 = -(qOS3*tmp2);
double tmp41 = tmp37 + tmp38 + tmp39 + tmp40;
double tmp42 = qOS3*tmp1;
double tmp43 = -(tmp15*tmp7);
double tmp44 = -(qOS3*tmp3);
double tmp45 = tmp15*tmp5;
double tmp46 = -(qOS1*tmp1);
double tmp47 = qOS2*tmp7;
double tmp48 = tmp15*tmp1;
double tmp49 = -(qOS3*tmp7);
double tmp50 = -(qOS2*tmp3);
double tmp51 = qOS1*tmp5;
double tmp52 = tmp2*tmp1;
double tmp53 = -(tmp0*tmp3);
double tmp54 = tmp6*tmp5;
double tmp55 = -(tmp4*tmp7);
double tmp56 = tmp52 + tmp53 + tmp54 + tmp55;
double tmp57 = tmp0*tmp1;
double tmp58 = tmp2*tmp3;
double tmp59 = -(tmp4*tmp5);
double tmp60 = -(qOS2*tmp7);
double tmp61 = tmp4*tmp1;
double tmp62 = tmp0*tmp5;
double tmp63 = tmp2*tmp7;
double tmp64 = -(tmp4*tmp1);
double tmp65 = -(tmp6*tmp3);
double tmp66 = -(tmp0*tmp5);
double tmp67 = -(tmp2*tmp7);
double tmp68 = tmp64 + tmp65 + tmp66 + tmp67;
double tmp69 = -(qOS2*tmp1);
double tmp70 = -(tmp15*tmp5);
double tmp71 = -(tmp2*tmp1);
double tmp72 = tmp0*tmp3;
double tmp73 = -(tmp6*tmp5);
double tmp74 = tmp4*tmp7;
double tmp75 = tmp6*tmp1;
double tmp76 = -(tmp4*tmp3);
double tmp77 = -(tmp2*tmp5);
double tmp78 = tmp0*tmp7;
double tmp79 = tmp75 + tmp76 + tmp77 + tmp78;
double tmp80 = tmp4*tmp3;
double tmp81 = tmp2*tmp5;
double tmp82 = -(tmp0*tmp7);
double tmp83 = -(tmp6*tmp1);
double tmp84 = tmp83 + tmp80 + tmp81 + tmp82;
double tmp85 = -(tmp6*tmp7);
double tmp86 = tmp57 + tmp58 + tmp59 + tmp85;
double tmp87 = -(tmp0*tmp1);
double tmp88 = -(tmp2*tmp3);
double tmp89 = tmp4*tmp5;
double tmp90 = qOS2*tmp3;
double tmp91 = tmp61 + tmp62 + tmp63;
double tmp92 = tmp6*tmp7;
double tmp93 = tmp87 + tmp88 + tmp89 + tmp92;
double tmp94 = tmp71 + tmp72 + tmp73 + tmp74;
double tmp95 = -(tmp15*tmp3);
double tmp96 = qOS3*tmp5;
double tmp97 = tmp52 + tmp53 + tmp55;
double tmp98 = -(tmp15*tmp91);
double tmp99 = -(tmp15*tmp97);
double tmp100 = tmp6*tmp3;
double tmp101 = 2*tmp8*tmp68;
double tmp102 = tmp87 + tmp88 + tmp89;
double tmp103 = -(tmp15*tmp102);
double tmp104 = tmp80 + tmp81 + tmp82;
double tmp105 = tmp15*tmp79;
J(1+_OFF,4+_OFF) = tmp79;
J(1+_OFF,5+_OFF) = tmp86;
J(1+_OFF,6+_OFF) = tmp56;
J(2+_OFF,4+_OFF) = -(tmp27*(tmp21 + tmp44 + tmp70 + tmp22)) + tmp20*(qOS1*tmp1 + tmp28 + tmp29 + tmp47) + tmp41*(tmp48 + tmp35 + tmp36 + qOS3*tmp7) - tmp34*(tmp42 + tmp90 + tmp51 + tmp43);
J(2+_OFF,5+_OFF) = tmp20*(tmp21 + qOS3*tmp3 + tmp45 + tmp22) - tmp27*(tmp46 + tmp28 + tmp29 + tmp60) - tmp34*(-(tmp15*tmp1) + tmp35 + tmp36 + tmp49) + tmp41*(tmp42 + tmp50 - qOS1*tmp5 + tmp43);
J(2+_OFF,6+_OFF) = tmp41*(tmp69 + tmp44 + tmp45 + tmp22) - tmp34*(tmp46 + tmp28 + tmp96 + tmp47) - tmp27*(tmp48 + qOS1*tmp3 + tmp36 + tmp49) + tmp20*(tmp42 + tmp50 + tmp51 + tmp15*tmp7);
J(3+_OFF,4+_OFF) = tmp71 + tmp72 + tmp73 + tmp74 + 2*tmp8*tmp56 + 2*tmp12*tmp56 - 2*qOS1*(tmp15*tmp93 + qOS2*tmp68) + 2*qOS3*(qOS2*(tmp57 + tmp58 + tmp59) + tmp6*(tmp95 + tmp60) + tmp98);
J(3+_OFF,5+_OFF) = tmp61 + tmp100 + tmp62 + tmp63 + tmp101 + 2*tmp12*tmp68 + 2*qOS3*(tmp6*(tmp69 + tmp70) + tmp99 + qOS2*tmp104) - 2*qOS1*(qOS2*tmp94 + tmp105);
J(3+_OFF,6+_OFF) = tmp75 + tmp76 + tmp77 + tmp78 + 2*tmp8*tmp84 + 2*tmp12*tmp84 - 2*qOS1*(qOS2*tmp86 + tmp15*tmp68) + 2*qOS3*(tmp103 + tmp6*(tmp90 + tmp43) + qOS2*tmp91);
J(4+_OFF,4+_OFF) = tmp57 + tmp58 + tmp59 + tmp85 + 2*tmp8*tmp93 + 2*tmp10*tmp93 - 2*qOS1*(tmp15*tmp94 + qOS3*tmp68) - 2*qOS2*(tmp6*(tmp95 + tmp96) + qOS3*tmp97 + tmp98);
J(4+_OFF,5+_OFF) = tmp83 + tmp80 + tmp81 + tmp82 + 2*tmp8*tmp79 + 2*tmp10*tmp79 - 2*qOS2*(tmp6*(tmp44 + tmp70) + tmp99 + qOS3*(tmp64 + tmp66 + tmp67)) - 2*qOS1*(qOS3*tmp94 + tmp15*(tmp61 + tmp100 + tmp62 + tmp63));
J(4+_OFF,6+_OFF) = tmp61 + tmp100 + tmp62 + tmp63 + tmp101 + 2*tmp10*tmp68 - 2*qOS2*(tmp103 + tmp6*(-(qOS3*tmp1) + tmp43) + qOS3*tmp104) - 2*qOS1*(qOS3*tmp86 + tmp105);
