double tmp0 = -t1;
double tmp1 = tmp0 + t2;
double tmp2 = 1/tmp1;
double tmp3 = delay + tmp0 + ti;
double tmp4 = 0.001*tmp2*tmp3;
double tmp5 = x1(5+_OFF);
double tmp6 = x2(4+_OFF);
double tmp7 = 0.01*tmp6;
double tmp8 = 0. + tmp7;
double tmp9 = xi(4+_OFF);
double tmp10 = x1(6+_OFF);
double tmp11 = x1(7+_OFF);
double tmp12 = x2(5+_OFF);
double tmp13 = -0.01*tmp12;
double tmp14 = 0. + tmp13;
double tmp15 = x1(4+_OFF);
double tmp16 = tmp5*tmp8;
double tmp17 = x2(6+_OFF);
double tmp18 = -0.01*tmp17;
double tmp19 = 0. + tmp18;
double tmp20 = tmp11*tmp19;
double tmp21 = x2(7+_OFF);
double tmp22 = 0.01*tmp21;
double tmp23 = 0. + tmp22;
double tmp24 = tmp10*tmp23;
double tmp25 = xi(5+_OFF);
double tmp26 = std::pow(tmp11,2);
double tmp27 = tmp15*tmp14;
double tmp28 = xi(6+_OFF);
double tmp29 = tmp16 + tmp27 + tmp20 + tmp24;
double tmp30 = xi(7+_OFF);
double tmp31 = std::pow(tmp5,2);
double tmp32 = std::pow(tmp10,2);
double tmp33 = -t2;
double tmp34 = t1 + tmp33;
double tmp35 = 1/tmp34;
double tmp36 = -0.01*tmp21;
double tmp37 = 0. + tmp36;
double tmp38 = tmp31 + tmp32 + tmp26;
double tmp39 = tmp10*tmp8;
double tmp40 = 0.01*tmp12;
double tmp41 = 0. + tmp40;
double tmp42 = tmp11*tmp41;
double tmp43 = tmp5*tmp37;
double tmp44 = -1 + tmp26;
double tmp45 = tmp15*tmp19;
double tmp46 = tmp39 + tmp42 + tmp45 + tmp43;
double tmp47 = delay + ti;
double tmp48 = -1 + tmp32;
double tmp49 = -1 + tmp31;
double tmp50 = tmp49*tmp9;
double tmp51 = -(tmp11*tmp28);
double tmp52 = tmp10*tmp30;
double tmp53 = tmp51 + tmp52;
double tmp54 = tmp5*tmp53;
double tmp55 = tmp50 + tmp54;
double tmp56 = 0.01*tmp17;
double tmp57 = 0. + tmp56;
double tmp58 = tmp11*tmp8;
double tmp59 = tmp10*tmp14;
double tmp60 = tmp5*tmp57;
double tmp61 = tmp15*tmp37;
double tmp62 = tmp58 + tmp59 + tmp60 + tmp61;
double tmp63 = tmp16 + tmp27 + tmp24;
double tmp64 = tmp16 + tmp20 + tmp24;
double tmp65 = tmp26*tmp19*tmp25;
double tmp66 = tmp8*tmp30;
double tmp67 = tmp8*tmp28;
double tmp68 = tmp14*tmp30;
double tmp69 = -0.01*tmp6;
double tmp70 = tmp39 + tmp45 + tmp43;
double tmp71 = tmp39 + tmp42 + tmp43;
double tmp72 = tmp32 + tmp26;
double tmp73 = tmp10*tmp9;
double tmp74 = tmp11*tmp25;
double tmp75 = tmp73 + tmp74;
double tmp76 = tmp19*tmp28;
double tmp77 = tmp59 + tmp60 + tmp61;
double tmp78 = tmp58 + tmp59 + tmp60;
double tmp79 = -(tmp14*tmp9);
double tmp80 = tmp37*tmp28;
double tmp81 = tmp37*tmp25;
double tmp82 = -(tmp8*tmp28);
double tmp83 = tmp37*tmp9;
double tmp84 = tmp37*tmp30;
double tmp85 = tmp19*tmp9;
double tmp86 = tmp48*tmp23;
double tmp87 = -(tmp38*tmp14);
double tmp88 = tmp15*tmp64;
double tmp89 = tmp87 + tmp88;
double tmp90 = -(tmp19*tmp9);
double tmp91 = tmp11*tmp19*tmp28;
double tmp92 = tmp67 + tmp68;
double tmp93 = -(tmp10*tmp25);
double tmp94 = tmp5*tmp28;
double tmp95 = tmp48*tmp8;
double tmp96 = tmp93 + tmp94;
double tmp97 = -(tmp38*tmp19);
double tmp98 = tmp15*tmp71;
double tmp99 = tmp97 + tmp98;
double tmp100 = tmp10*tmp11*tmp8*tmp9;
double tmp101 = tmp8*tmp25;
double tmp102 = tmp19*tmp30;
double tmp103 = tmp80 + tmp102;
double tmp104 = tmp11*tmp9;
double tmp105 = tmp104 + tmp93 + tmp94;
double tmp106 = tmp8*tmp9;
double tmp107 = tmp48*tmp14;
double tmp108 = tmp15*tmp78;
double tmp109 = -(tmp38*tmp37);
double tmp110 = tmp108 + tmp109;
double tmp111 = -(tmp8*tmp9);
double tmp112 = tmp14*tmp25;
double tmp113 = tmp57*tmp28;
double tmp114 = tmp113 + tmp84;
J(1+_OFF,1+_OFF) = tmp4;
J(1+_OFF,2+_OFF) = 0;
J(1+_OFF,3+_OFF) = 0;
J(1+_OFF,4+_OFF) = 0;
J(1+_OFF,5+_OFF) = 0;
J(1+_OFF,6+_OFF) = 0;
J(2+_OFF,1+_OFF) = 0;
J(2+_OFF,2+_OFF) = tmp4;
J(2+_OFF,3+_OFF) = 0;
J(2+_OFF,4+_OFF) = 0;
J(2+_OFF,5+_OFF) = 0;
J(2+_OFF,6+_OFF) = 0;
J(3+_OFF,1+_OFF) = 0;
J(3+_OFF,2+_OFF) = 0;
J(3+_OFF,3+_OFF) = tmp4;
J(3+_OFF,4+_OFF) = 0;
J(3+_OFF,5+_OFF) = 0;
J(3+_OFF,6+_OFF) = 0;
J(4+_OFF,1+_OFF) = 0;
J(4+_OFF,2+_OFF) = 0;
J(4+_OFF,3+_OFF) = 0;
J(4+_OFF,4+_OFF) = tmp35*(2*t1*(tmp106 - tmp5*tmp29*tmp9 - tmp38*tmp14*tmp25 + tmp15*tmp64*tmp25 + tmp44*tmp19*tmp28 + tmp11*tmp63*tmp28 - tmp10*tmp29*tmp30 + tmp23*tmp30) + 2*tmp47*(tmp5*tmp11*tmp19*tmp9 + tmp5*tmp10*tmp23*tmp9 + tmp31*tmp14*tmp25 + tmp32*tmp14*tmp25 + tmp26*tmp14*tmp25 + tmp76 - tmp26*tmp19*tmp28 - tmp10*tmp11*tmp23*tmp28 + (tmp10*tmp11*tmp19 + tmp86)*tmp30 - tmp15*(tmp11*tmp19*tmp25 + tmp10*tmp23*tmp25 + tmp5*(tmp79 + tmp101) + tmp11*tmp14*tmp28 - tmp10*tmp14*tmp30) + tmp8*tmp55));
J(4+_OFF,5+_OFF) = tmp35*(2*t1*(-(tmp5*tmp46*tmp9) + tmp83 - tmp38*tmp19*tmp25 + tmp15*tmp71*tmp25 + tmp44*tmp41*tmp28 + tmp11*tmp70*tmp28 + tmp66 - tmp10*tmp46*tmp30) + 2*tmp47*(tmp5*tmp10*tmp8*tmp9 + tmp5*tmp11*tmp41*tmp9 + tmp31*tmp19*tmp25 + tmp32*tmp19*tmp25 + tmp65 - tmp10*tmp11*tmp8*tmp28 + tmp41*tmp28 - tmp26*tmp41*tmp28 + (tmp95 + tmp10*tmp11*tmp41)*tmp30 - tmp15*(tmp10*tmp8*tmp25 + tmp11*tmp41*tmp25 + tmp5*(tmp90 + tmp81) + tmp91 - tmp10*tmp19*tmp30) + tmp37*tmp55));
J(4+_OFF,6+_OFF) = tmp35*(2*t1*(tmp57*tmp9 - tmp5*tmp62*tmp9 + tmp15*tmp78*tmp25 - tmp38*tmp37*tmp25 + tmp44*tmp8*tmp28 + tmp11*tmp77*tmp28 + tmp68 - tmp10*tmp62*tmp30) + 2*tmp47*(tmp5*tmp11*tmp8*tmp9 + tmp5*tmp10*tmp14*tmp9 + tmp31*tmp37*tmp25 + tmp32*tmp37*tmp25 + tmp26*tmp37*tmp25 + tmp67 - tmp26*tmp8*tmp28 - tmp10*tmp11*tmp14*tmp28 + (tmp10*tmp11*tmp8 + tmp107)*tmp30 - tmp15*(tmp11*tmp8*tmp25 + tmp10*tmp14*tmp25 + tmp5*(-(tmp37*tmp9) + tmp57*tmp25) + tmp11*tmp37*tmp28 - tmp10*tmp37*tmp30) + tmp57*tmp55));
J(5+_OFF,1+_OFF) = 0;
J(5+_OFF,2+_OFF) = 0;
J(5+_OFF,3+_OFF) = 0;
J(5+_OFF,4+_OFF) = tmp35*(t1*(-2*(0. + tmp10*tmp29 + tmp36)*tmp9 - 2*(tmp44*tmp19 + tmp11*tmp63)*tmp25 + 2*tmp89*tmp28 + 2*(0. + tmp69 + tmp5*tmp29)*tmp30) + 2*tmp47*(tmp10*tmp11*tmp19*tmp9 - tmp23*tmp9 + tmp32*tmp23*tmp9 - tmp19*tmp25 + tmp65 + tmp10*tmp11*tmp23*tmp25 + tmp72*tmp14*tmp28 + tmp66 + tmp31*(tmp14*tmp28 - tmp8*tmp30) + tmp5*(tmp8*tmp75 - (tmp20 + tmp24)*tmp30) + tmp15*(tmp11*(tmp112 - tmp19*tmp28) + tmp10*(tmp14*tmp9 - tmp23*tmp28) - tmp5*tmp92)));
J(5+_OFF,5+_OFF) = tmp35*(t1*(-2*(0. + tmp69 + tmp10*tmp46)*tmp9 - 2*(tmp44*tmp41 + tmp11*tmp70)*tmp25 + 2*tmp99*tmp28 + 2*(0. + tmp5*tmp46 + tmp22)*tmp30) + 2*tmp47*(tmp111 + tmp32*tmp8*tmp9 + tmp10*tmp11*tmp41*tmp9 + tmp10*tmp11*tmp8*tmp25 - tmp41*tmp25 + tmp26*tmp41*tmp25 + tmp72*tmp19*tmp28 + tmp84 + tmp5*(tmp37*tmp75 - (tmp39 + tmp42)*tmp30) + tmp31*(tmp76 - tmp37*tmp30) + tmp15*(tmp10*(tmp85 + tmp82) + tmp11*(tmp19*tmp25 - tmp41*tmp28) - tmp5*tmp103)));
J(5+_OFF,6+_OFF) = tmp35*(t1*(-2*(0. + tmp40 + tmp10*tmp62)*tmp9 - 2*(tmp44*tmp8 + tmp11*tmp77)*tmp25 + 2*tmp110*tmp28 + 2*(0. + tmp18 + tmp5*tmp62)*tmp30) + 2*tmp47*(tmp100 + tmp79 + tmp32*tmp14*tmp9 - tmp8*tmp25 + tmp26*tmp8*tmp25 + tmp10*tmp11*tmp14*tmp25 + tmp72*tmp37*tmp28 + tmp57*tmp30 + tmp5*(tmp57*tmp75 - (tmp58 + tmp59)*tmp30) + tmp31*(tmp80 - tmp57*tmp30) + tmp15*(tmp11*(tmp81 + tmp82) + tmp10*(tmp83 - tmp14*tmp28) - tmp5*tmp114)));
J(6+_OFF,1+_OFF) = 0;
J(6+_OFF,2+_OFF) = 0;
J(6+_OFF,3+_OFF) = 0;
J(6+_OFF,4+_OFF) = tmp35*(2*t1*(tmp85 - tmp26*tmp19*tmp9 + (tmp10*(tmp16 + tmp27) + tmp86)*tmp25 + (0. + tmp7 - tmp5*tmp63)*tmp28 - tmp11*(tmp63*tmp9 + tmp19*tmp96) + tmp89*tmp30) + 2*tmp47*(tmp90 + tmp26*tmp19*tmp9 + tmp10*tmp11*tmp23*tmp9 - tmp10*tmp11*tmp19*tmp25 + tmp23*tmp25 - tmp32*tmp23*tmp25 + tmp82 + tmp5*(tmp11*tmp8*tmp9 - tmp10*tmp8*tmp25 + tmp91 + tmp10*tmp23*tmp28) + tmp72*tmp14*tmp30 + tmp31*tmp92 + tmp15*(tmp14*tmp105 - tmp64*tmp30)));
J(6+_OFF,5+_OFF) = tmp35*(2*t1*(tmp41*tmp9 - tmp26*tmp41*tmp9 + (tmp95 + tmp10*(tmp45 + tmp43))*tmp25 + (0. - tmp5*tmp70 + tmp36)*tmp28 - tmp11*(tmp70*tmp9 + tmp41*tmp96) + tmp99*tmp30) + 2*tmp47*(tmp100 - tmp41*tmp9 + tmp26*tmp41*tmp9 + tmp101 - tmp32*tmp8*tmp25 - tmp10*tmp11*tmp41*tmp25 - tmp37*tmp28 + tmp5*(tmp11*tmp37*tmp9 - tmp10*tmp37*tmp25 + tmp10*tmp8*tmp28 + tmp11*tmp41*tmp28) + tmp72*tmp19*tmp30 + tmp31*tmp103 + tmp15*(tmp19*tmp105 - tmp71*tmp30)));
J(6+_OFF,6+_OFF) = tmp35*(2*t1*(tmp106 - tmp26*tmp8*tmp9 + (tmp107 + tmp10*(tmp60 + tmp61))*tmp25 + (0. + tmp56 - tmp5*tmp77)*tmp28 - tmp11*(tmp77*tmp9 + tmp8*tmp96) + tmp110*tmp30) + 2*tmp47*(tmp111 + tmp26*tmp8*tmp9 + tmp10*tmp11*tmp14*tmp9 - tmp10*tmp11*tmp8*tmp25 + tmp112 - tmp32*tmp14*tmp25 - tmp57*tmp28 + tmp5*(tmp11*tmp57*tmp9 - tmp10*tmp57*tmp25 + tmp11*tmp8*tmp28 + tmp10*tmp14*tmp28) + tmp72*tmp37*tmp30 + tmp15*(tmp37*tmp105 - tmp78*tmp30) + tmp31*tmp114));
