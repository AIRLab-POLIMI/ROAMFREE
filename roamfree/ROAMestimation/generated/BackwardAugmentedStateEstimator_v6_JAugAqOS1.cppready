double tmp0 = std::pow(Dt12,2);
double tmp1 = x1(3+_OFF);
double tmp2 = x1(4+_OFF);
double tmp3 = x1(5+_OFF);
double tmp4 = Dt01 + Dt12;
double tmp5 = x0(4+_OFF);
double tmp6 = x0(7+_OFF);
double tmp7 = x1(6+_OFF);
double tmp8 = x0(5+_OFF);
double tmp9 = x0(6+_OFF);
double tmp10 = x1(7+_OFF);
double tmp11 = x2(4+_OFF);
double tmp12 = x2(5+_OFF);
double tmp13 = std::pow(tmp7,2);
double tmp14 = x1(2+_OFF);
double tmp15 = -tmp14;
double tmp16 = std::pow(tmp12,2);
double tmp17 = std::pow(tmp3,2);
double tmp18 = x0(3+_OFF);
double tmp19 = -tmp1;
double tmp20 = x2(3+_OFF);
double tmp21 = x2(6+_OFF);
double tmp22 = std::pow(tmp10,2);
double tmp23 = x1(1+_OFF);
double tmp24 = std::pow(tmp21,2);
double tmp25 = std::pow(Dt01,2);
double tmp26 = tmp25*sO3;
double tmp27 = tmp18 + tmp19;
double tmp28 = tmp0*tmp27;
double tmp29 = sO3 + tmp19 + tmp20;
double tmp30 = Dt01*Dt12*tmp29;
double tmp31 = tmp26 + tmp28 + tmp30;
double tmp32 = x2(7+_OFF);
double tmp33 = x0(1+_OFF);
double tmp34 = -tmp23;
double tmp35 = x2(1+_OFF);
double tmp36 = x0(2+_OFF);
double tmp37 = tmp36 + tmp15;
double tmp38 = x2(2+_OFF);
double tmp39 = std::pow(tmp32,2);
double tmp40 = 1/Dt01;
double tmp41 = std::pow(Dt12,-2);
double tmp42 = 1/tmp4;
double tmp43 = std::pow(qOS1,2);
double tmp44 = -tmp43;
double tmp45 = std::pow(qOS2,2);
double tmp46 = -tmp45;
double tmp47 = std::pow(qOS3,2);
double tmp48 = -tmp47;
double tmp49 = 1 + tmp44 + tmp46 + tmp48;
double tmp50 = 1/std::sqrt(tmp49);
double tmp51 = tmp25*sO2;
double tmp52 = tmp0*tmp37;
double tmp53 = sO2 + tmp15 + tmp38;
double tmp54 = Dt01*Dt12*tmp53;
double tmp55 = tmp51 + tmp52 + tmp54;
double tmp56 = tmp25*sO1;
double tmp57 = tmp33 + tmp34;
double tmp58 = tmp0*tmp57;
double tmp59 = sO1 + tmp34 + tmp35;
double tmp60 = Dt01*Dt12*tmp59;
double tmp61 = tmp56 + tmp58 + tmp60;
double tmp62 = -(tmp0*tmp18);
double tmp63 = Dt01*Dt12*tmp1;
double tmp64 = tmp0*tmp1;
double tmp65 = -2*tmp0*sO2*tmp8*tmp2;
double tmp66 = 2*tmp0*sO1*tmp9*tmp2;
double tmp67 = 2*tmp0*sO2*tmp5*tmp3;
double tmp68 = -2*tmp0*sO1*tmp6*tmp3;
double tmp69 = 2*Dt01*tmp4*sO3*tmp17;
double tmp70 = -2*tmp0*sO1*tmp5*tmp7;
double tmp71 = -2*tmp0*sO2*tmp6*tmp7;
double tmp72 = 2*Dt01*tmp4*sO3*tmp13;
double tmp73 = 2*tmp0*sO1*tmp8*tmp10;
double tmp74 = 2*tmp0*sO2*tmp9*tmp10;
double tmp75 = -2*Dt01*tmp4*sO1*tmp3*tmp10;
double tmp76 = -2*Dt01*tmp4*sO2*tmp7*tmp10;
double tmp77 = -(Dt01*Dt12*tmp20);
double tmp78 = 2*Dt01*Dt12*sO2*tmp3*tmp11;
double tmp79 = -2*Dt01*Dt12*sO1*tmp7*tmp11;
double tmp80 = -2*Dt01*Dt12*sO2*tmp2*tmp12;
double tmp81 = -2*Dt01*Dt12*sO1*tmp10*tmp12;
double tmp82 = 4*tmp0*sO1*tmp6*tmp2*tmp11*tmp12;
double tmp83 = 4*tmp0*sO1*tmp9*tmp3*tmp11*tmp12;
double tmp84 = -4*Dt01*tmp4*sO3*tmp2*tmp3*tmp11*tmp12;
double tmp85 = -4*tmp0*sO1*tmp8*tmp7*tmp11*tmp12;
double tmp86 = 2*Dt01*tmp4*sO1*tmp3*tmp7*tmp11*tmp12;
double tmp87 = 2*Dt01*tmp4*sO2*tmp13*tmp11*tmp12;
double tmp88 = -4*tmp0*sO1*tmp5*tmp10*tmp11*tmp12;
double tmp89 = 2*Dt01*tmp4*sO1*tmp2*tmp10*tmp11*tmp12;
double tmp90 = 4*Dt01*tmp4*sO3*tmp7*tmp10*tmp11*tmp12;
double tmp91 = -2*Dt01*tmp4*sO2*tmp22*tmp11*tmp12;
double tmp92 = Dt12*tmp37;
double tmp93 = tmp15 + tmp38;
double tmp94 = Dt01*tmp93;
double tmp95 = tmp92 + tmp94;
double tmp96 = 2*Dt12*tmp95*tmp11*tmp12;
double tmp97 = -4*tmp0*sO1*tmp9*tmp2*tmp16;
double tmp98 = 4*tmp0*sO1*tmp6*tmp3*tmp16;
double tmp99 = -4*Dt01*tmp4*sO3*tmp17*tmp16;
double tmp100 = 4*tmp0*sO1*tmp5*tmp7*tmp16;
double tmp101 = -2*Dt01*tmp4*sO1*tmp2*tmp7*tmp16;
double tmp102 = -4*Dt01*tmp4*sO3*tmp13*tmp16;
double tmp103 = -4*tmp0*sO1*tmp8*tmp10*tmp16;
double tmp104 = 2*Dt01*tmp4*sO1*tmp3*tmp10*tmp16;
double tmp105 = 4*Dt01*tmp4*sO2*tmp7*tmp10*tmp16;
double tmp106 = 2*tmp31*tmp16;
double tmp107 = 2*Dt01*Dt12*sO1*tmp2*tmp21;
double tmp108 = -2*Dt01*Dt12*sO2*tmp10*tmp21;
double tmp109 = 4*tmp0*sO2*tmp6*tmp2*tmp11*tmp21;
double tmp110 = 4*tmp0*sO2*tmp9*tmp3*tmp11*tmp21;
double tmp111 = -2*Dt01*tmp4*sO1*tmp17*tmp11*tmp21;
double tmp112 = -4*tmp0*sO2*tmp8*tmp7*tmp11*tmp21;
double tmp113 = -4*Dt01*tmp4*sO3*tmp2*tmp7*tmp11*tmp21;
double tmp114 = -2*Dt01*tmp4*sO2*tmp3*tmp7*tmp11*tmp21;
double tmp115 = -4*tmp0*sO2*tmp5*tmp10*tmp11*tmp21;
double tmp116 = 2*Dt01*tmp4*sO2*tmp2*tmp10*tmp11*tmp21;
double tmp117 = -4*Dt01*tmp4*sO3*tmp3*tmp10*tmp11*tmp21;
double tmp118 = 2*Dt01*tmp4*sO1*tmp22*tmp11*tmp21;
double tmp119 = -tmp33;
double tmp120 = tmp119 + tmp23;
double tmp121 = Dt12*tmp120;
double tmp122 = -tmp35;
double tmp123 = tmp23 + tmp122;
double tmp124 = Dt01*tmp123;
double tmp125 = tmp121 + tmp124;
double tmp126 = 2*Dt12*tmp125*tmp11*tmp21;
double tmp127 = 4*tmp0*sO1*tmp8*tmp2*tmp12*tmp21;
double tmp128 = -4*tmp0*sO2*tmp9*tmp2*tmp12*tmp21;
double tmp129 = -4*tmp0*sO1*tmp5*tmp3*tmp12*tmp21;
double tmp130 = 4*tmp0*sO2*tmp6*tmp3*tmp12*tmp21;
double tmp131 = 2*Dt01*tmp4*sO1*tmp2*tmp3*tmp12*tmp21;
double tmp132 = 4*tmp0*sO2*tmp5*tmp7*tmp12*tmp21;
double tmp133 = 4*tmp0*sO1*tmp6*tmp7*tmp12*tmp21;
double tmp134 = -2*Dt01*tmp4*sO2*tmp2*tmp7*tmp12*tmp21;
double tmp135 = -4*tmp0*sO2*tmp8*tmp10*tmp12*tmp21;
double tmp136 = -4*tmp0*sO1*tmp9*tmp10*tmp12*tmp21;
double tmp137 = -2*Dt01*tmp4*sO2*tmp3*tmp10*tmp12*tmp21;
double tmp138 = -2*Dt01*tmp4*sO1*tmp7*tmp10*tmp12*tmp21;
double tmp139 = 4*tmp0*sO2*tmp8*tmp2*tmp24;
double tmp140 = -4*tmp0*sO2*tmp5*tmp3*tmp24;
double tmp141 = 2*Dt01*tmp4*sO2*tmp2*tmp3*tmp24;
double tmp142 = -4*Dt01*tmp4*sO3*tmp17*tmp24;
double tmp143 = 4*tmp0*sO2*tmp6*tmp7*tmp24;
double tmp144 = -4*Dt01*tmp4*sO3*tmp13*tmp24;
double tmp145 = -4*tmp0*sO2*tmp9*tmp10*tmp24;
double tmp146 = 4*Dt01*tmp4*sO1*tmp3*tmp10*tmp24;
double tmp147 = 2*Dt01*tmp4*sO2*tmp7*tmp10*tmp24;
double tmp148 = 2*tmp31*tmp24;
double tmp149 = 2*Dt01*Dt12*sO1*tmp3*tmp32;
double tmp150 = 2*Dt01*Dt12*sO2*tmp7*tmp32;
double tmp151 = -4*tmp0*sO1*tmp8*tmp2*tmp11*tmp32;
double tmp152 = -4*tmp0*sO2*tmp9*tmp2*tmp11*tmp32;
double tmp153 = 4*tmp0*sO1*tmp5*tmp3*tmp11*tmp32;
double tmp154 = 4*tmp0*sO2*tmp6*tmp3*tmp11*tmp32;
double tmp155 = 2*Dt01*tmp4*sO1*tmp2*tmp3*tmp11*tmp32;
double tmp156 = 4*tmp0*sO2*tmp5*tmp7*tmp11*tmp32;
double tmp157 = -4*tmp0*sO1*tmp6*tmp7*tmp11*tmp32;
double tmp158 = 2*Dt01*tmp4*sO2*tmp2*tmp7*tmp11*tmp32;
double tmp159 = -4*tmp0*sO2*tmp8*tmp10*tmp11*tmp32;
double tmp160 = 4*tmp0*sO1*tmp9*tmp10*tmp11*tmp32;
double tmp161 = 2*Dt01*tmp4*sO2*tmp3*tmp10*tmp11*tmp32;
double tmp162 = -2*Dt01*tmp4*sO1*tmp7*tmp10*tmp11*tmp32;
double tmp163 = -4*tmp0*sO2*tmp6*tmp2*tmp12*tmp32;
double tmp164 = -4*tmp0*sO2*tmp9*tmp3*tmp12*tmp32;
double tmp165 = 2*Dt01*tmp4*sO1*tmp17*tmp12*tmp32;
double tmp166 = 4*tmp0*sO2*tmp8*tmp7*tmp12*tmp32;
double tmp167 = -4*Dt01*tmp4*sO3*tmp2*tmp7*tmp12*tmp32;
double tmp168 = -2*Dt01*tmp4*sO2*tmp3*tmp7*tmp12*tmp32;
double tmp169 = 4*Dt01*tmp4*sO1*tmp13*tmp12*tmp32;
double tmp170 = 4*tmp0*sO2*tmp5*tmp10*tmp12*tmp32;
double tmp171 = 2*Dt01*tmp4*sO2*tmp2*tmp10*tmp12*tmp32;
double tmp172 = -4*Dt01*tmp4*sO3*tmp3*tmp10*tmp12*tmp32;
double tmp173 = 2*Dt01*tmp4*sO1*tmp22*tmp12*tmp32;
double tmp174 = -2*tmp61*tmp12*tmp32;
double tmp175 = 4*tmp0*sO1*tmp6*tmp2*tmp21*tmp32;
double tmp176 = 4*tmp0*sO1*tmp9*tmp3*tmp21*tmp32;
double tmp177 = 4*Dt01*tmp4*sO3*tmp2*tmp3*tmp21*tmp32;
double tmp178 = 4*Dt01*tmp4*sO2*tmp17*tmp21*tmp32;
double tmp179 = -4*tmp0*sO1*tmp8*tmp7*tmp21*tmp32;
double tmp180 = -2*Dt01*tmp4*sO1*tmp3*tmp7*tmp21*tmp32;
double tmp181 = 2*Dt01*tmp4*sO2*tmp13*tmp21*tmp32;
double tmp182 = -4*tmp0*sO1*tmp5*tmp10*tmp21*tmp32;
double tmp183 = -2*Dt01*tmp4*sO1*tmp2*tmp10*tmp21*tmp32;
double tmp184 = -4*Dt01*tmp4*sO3*tmp7*tmp10*tmp21*tmp32;
double tmp185 = 2*Dt01*tmp4*sO2*tmp22*tmp21*tmp32;
double tmp186 = -2*tmp55*tmp21*tmp32;
double tmp187 = 4*tmp0*sO2*tmp8*tmp2*tmp39;
double tmp188 = -4*tmp0*sO1*tmp9*tmp2*tmp39;
double tmp189 = -4*tmp0*sO2*tmp5*tmp3*tmp39;
double tmp190 = 4*tmp0*sO1*tmp6*tmp3*tmp39;
double tmp191 = -2*Dt01*tmp4*sO2*tmp2*tmp3*tmp39;
double tmp192 = 4*tmp0*sO1*tmp5*tmp7*tmp39;
double tmp193 = 4*tmp0*sO2*tmp6*tmp7*tmp39;
double tmp194 = 2*Dt01*tmp4*sO1*tmp2*tmp7*tmp39;
double tmp195 = -4*tmp0*sO1*tmp8*tmp10*tmp39;
double tmp196 = -4*tmp0*sO2*tmp9*tmp10*tmp39;
double tmp197 = 2*Dt01*tmp4*sO1*tmp3*tmp10*tmp39;
double tmp198 = 2*Dt01*tmp4*sO2*tmp7*tmp10*tmp39;
double tmp199 = tmp62 + tmp63 + tmp64 + tmp65 + tmp66 + tmp67 + tmp68 + tmp69 + tmp70 + tmp71 + tmp72 + tmp73 + tmp74 + tmp75 + tmp76 + tmp77 + tmp78 + tmp79 + tmp80 + tmp81 + tmp82 + tmp83 + tmp84 + tmp85 + tmp86 + tmp87 + tmp88 + tmp89 + tmp90 + tmp91 + tmp96 + tmp97 + tmp98 + tmp99 + tmp100 + tmp101 + tmp102 + tmp103 + tmp104 + tmp105 + tmp106 + tmp107 + tmp108 + tmp109 + tmp110 + tmp111 + tmp112 + tmp113 + tmp114 + tmp115 + tmp116 + tmp117 + tmp118 + tmp126 + tmp127 + tmp128 + tmp129 + tmp130 + tmp131 + tmp132 + tmp133 + tmp134 + tmp135 + tmp136 + tmp137 + tmp138 + tmp139 + tmp140 + tmp141 + tmp142 + tmp143 + tmp144 + tmp145 + tmp146 + tmp147 + tmp148 + tmp149 + tmp150 + tmp151 + tmp152 + tmp153 + tmp154 + tmp155 + tmp156 + tmp157 + tmp158 + tmp159 + tmp160 + tmp161 + tmp162 + tmp163 + tmp164 + tmp165 + tmp166 + tmp167 + tmp168 + tmp169 + tmp170 + tmp171 + tmp172 + tmp173 + tmp174 + tmp175 + tmp176 + tmp177 + tmp178 + tmp179 + tmp180 + tmp181 + tmp182 + tmp183 + tmp184 + tmp185 + tmp186 + tmp187 + tmp188 + tmp189 + tmp190 + tmp191 + tmp192 + tmp193 + tmp194 + tmp195 + tmp196 + tmp197 + tmp198;
double tmp200 = -(tmp0*tmp36);
double tmp201 = Dt01*Dt12*tmp14;
double tmp202 = tmp0*tmp14;
double tmp203 = 2*tmp0*sO3*tmp8*tmp2;
double tmp204 = -2*tmp0*sO1*tmp6*tmp2;
double tmp205 = -2*tmp0*sO3*tmp5*tmp3;
double tmp206 = -2*tmp0*sO1*tmp9*tmp3;
double tmp207 = 2*Dt01*tmp4*sO2*tmp17;
double tmp208 = 2*tmp0*sO1*tmp8*tmp7;
double tmp209 = 2*tmp0*sO3*tmp6*tmp7;
double tmp210 = -2*Dt01*tmp4*sO1*tmp3*tmp7;
double tmp211 = 2*tmp0*sO1*tmp5*tmp10;
double tmp212 = -2*tmp0*sO3*tmp9*tmp10;
double tmp213 = -2*Dt01*tmp4*sO3*tmp7*tmp10;
double tmp214 = 2*Dt01*tmp4*sO2*tmp22;
double tmp215 = -(Dt01*Dt12*tmp38);
double tmp216 = -2*Dt01*Dt12*sO3*tmp3*tmp11;
double tmp217 = 2*Dt01*Dt12*sO1*tmp10*tmp11;
double tmp218 = 2*Dt01*Dt12*sO3*tmp2*tmp12;
double tmp219 = -2*Dt01*Dt12*sO1*tmp7*tmp12;
double tmp220 = 4*tmp0*sO1*tmp9*tmp2*tmp11*tmp12;
double tmp221 = -4*tmp0*sO1*tmp6*tmp3*tmp11*tmp12;
double tmp222 = -4*Dt01*tmp4*sO2*tmp2*tmp3*tmp11*tmp12;
double tmp223 = -4*tmp0*sO1*tmp5*tmp7*tmp11*tmp12;
double tmp224 = 2*Dt01*tmp4*sO1*tmp2*tmp7*tmp11*tmp12;
double tmp225 = 2*Dt01*tmp4*sO3*tmp13*tmp11*tmp12;
double tmp226 = 4*tmp0*sO1*tmp8*tmp10*tmp11*tmp12;
double tmp227 = -2*Dt01*tmp4*sO1*tmp3*tmp10*tmp11*tmp12;
double tmp228 = -4*Dt01*tmp4*sO2*tmp7*tmp10*tmp11*tmp12;
double tmp229 = -2*Dt01*tmp4*sO3*tmp22*tmp11*tmp12;
double tmp230 = -tmp18;
double tmp231 = tmp230 + tmp1;
double tmp232 = Dt12*tmp231;
double tmp233 = -tmp20;
double tmp234 = tmp1 + tmp233;
double tmp235 = Dt01*tmp234;
double tmp236 = tmp232 + tmp235;
double tmp237 = 2*Dt12*tmp236*tmp11*tmp12;
double tmp238 = 4*tmp0*sO1*tmp6*tmp2*tmp16;
double tmp239 = 4*tmp0*sO1*tmp9*tmp3*tmp16;
double tmp240 = -4*Dt01*tmp4*sO2*tmp17*tmp16;
double tmp241 = -4*tmp0*sO1*tmp8*tmp7*tmp16;
double tmp242 = 2*Dt01*tmp4*sO1*tmp3*tmp7*tmp16;
double tmp243 = -4*tmp0*sO1*tmp5*tmp10*tmp16;
double tmp244 = 2*Dt01*tmp4*sO1*tmp2*tmp10*tmp16;
double tmp245 = 4*Dt01*tmp4*sO3*tmp7*tmp10*tmp16;
double tmp246 = -4*Dt01*tmp4*sO2*tmp22*tmp16;
double tmp247 = 2*tmp55*tmp16;
double tmp248 = 2*Dt01*Dt12*sO1*tmp3*tmp21;
double tmp249 = 2*Dt01*Dt12*sO3*tmp10*tmp21;
double tmp250 = -4*tmp0*sO1*tmp8*tmp2*tmp11*tmp21;
double tmp251 = -4*tmp0*sO3*tmp6*tmp2*tmp11*tmp21;
double tmp252 = 4*tmp0*sO1*tmp5*tmp3*tmp11*tmp21;
double tmp253 = -4*tmp0*sO3*tmp9*tmp3*tmp11*tmp21;
double tmp254 = 2*Dt01*tmp4*sO1*tmp2*tmp3*tmp11*tmp21;
double tmp255 = 4*tmp0*sO3*tmp8*tmp7*tmp11*tmp21;
double tmp256 = -4*tmp0*sO1*tmp6*tmp7*tmp11*tmp21;
double tmp257 = -2*Dt01*tmp4*sO3*tmp3*tmp7*tmp11*tmp21;
double tmp258 = 4*tmp0*sO3*tmp5*tmp10*tmp11*tmp21;
double tmp259 = 4*tmp0*sO1*tmp9*tmp10*tmp11*tmp21;
double tmp260 = 2*Dt01*tmp4*sO3*tmp2*tmp10*tmp11*tmp21;
double tmp261 = 2*Dt01*tmp4*sO1*tmp7*tmp10*tmp11*tmp21;
double tmp262 = 4*tmp0*sO3*tmp9*tmp2*tmp12*tmp21;
double tmp263 = -4*tmp0*sO3*tmp6*tmp3*tmp12*tmp21;
double tmp264 = 2*Dt01*tmp4*sO1*tmp17*tmp12*tmp21;
double tmp265 = -4*tmp0*sO3*tmp5*tmp7*tmp12*tmp21;
double tmp266 = -2*Dt01*tmp4*sO3*tmp2*tmp7*tmp12*tmp21;
double tmp267 = -4*Dt01*tmp4*sO2*tmp3*tmp7*tmp12*tmp21;
double tmp268 = 2*Dt01*tmp4*sO1*tmp13*tmp12*tmp21;
double tmp269 = 4*tmp0*sO3*tmp8*tmp10*tmp12*tmp21;
double tmp270 = 4*Dt01*tmp4*sO2*tmp2*tmp10*tmp12*tmp21;
double tmp271 = -2*Dt01*tmp4*sO3*tmp3*tmp10*tmp12*tmp21;
double tmp272 = 4*Dt01*tmp4*sO1*tmp22*tmp12*tmp21;
double tmp273 = -2*tmp61*tmp12*tmp21;
double tmp274 = -4*tmp0*sO3*tmp8*tmp2*tmp24;
double tmp275 = 4*tmp0*sO1*tmp6*tmp2*tmp24;
double tmp276 = 4*tmp0*sO3*tmp5*tmp3*tmp24;
double tmp277 = 4*tmp0*sO1*tmp9*tmp3*tmp24;
double tmp278 = 2*Dt01*tmp4*sO3*tmp2*tmp3*tmp24;
double tmp279 = -4*tmp0*sO1*tmp8*tmp7*tmp24;
double tmp280 = -4*tmp0*sO3*tmp6*tmp7*tmp24;
double tmp281 = 2*Dt01*tmp4*sO1*tmp3*tmp7*tmp24;
double tmp282 = -4*tmp0*sO1*tmp5*tmp10*tmp24;
double tmp283 = 4*tmp0*sO3*tmp9*tmp10*tmp24;
double tmp284 = -2*Dt01*tmp4*sO1*tmp2*tmp10*tmp24;
double tmp285 = 2*Dt01*tmp4*sO3*tmp7*tmp10*tmp24;
double tmp286 = -2*Dt01*Dt12*sO1*tmp2*tmp32;
double tmp287 = -2*Dt01*Dt12*sO3*tmp7*tmp32;
double tmp288 = 4*tmp0*sO3*tmp9*tmp2*tmp11*tmp32;
double tmp289 = -4*tmp0*sO3*tmp6*tmp3*tmp11*tmp32;
double tmp290 = 2*Dt01*tmp4*sO1*tmp17*tmp11*tmp32;
double tmp291 = -4*tmp0*sO3*tmp5*tmp7*tmp11*tmp32;
double tmp292 = 2*Dt01*tmp4*sO3*tmp2*tmp7*tmp11*tmp32;
double tmp293 = 4*Dt01*tmp4*sO2*tmp3*tmp7*tmp11*tmp32;
double tmp294 = -2*Dt01*tmp4*sO1*tmp13*tmp11*tmp32;
double tmp295 = 4*tmp0*sO3*tmp8*tmp10*tmp11*tmp32;
double tmp296 = -4*Dt01*tmp4*sO2*tmp2*tmp10*tmp11*tmp32;
double tmp297 = 2*Dt01*tmp4*sO3*tmp3*tmp10*tmp11*tmp32;
double tmp298 = Dt12*tmp57;
double tmp299 = tmp34 + tmp35;
double tmp300 = Dt01*tmp299;
double tmp301 = tmp298 + tmp300;
double tmp302 = 2*Dt12*tmp301*tmp11*tmp32;
double tmp303 = -4*tmp0*sO1*tmp8*tmp2*tmp12*tmp32;
double tmp304 = 4*tmp0*sO3*tmp6*tmp2*tmp12*tmp32;
double tmp305 = 4*tmp0*sO1*tmp5*tmp3*tmp12*tmp32;
double tmp306 = 4*tmp0*sO3*tmp9*tmp3*tmp12*tmp32;
double tmp307 = -2*Dt01*tmp4*sO1*tmp2*tmp3*tmp12*tmp32;
double tmp308 = -4*tmp0*sO3*tmp8*tmp7*tmp12*tmp32;
double tmp309 = -4*tmp0*sO1*tmp6*tmp7*tmp12*tmp32;
double tmp310 = -2*Dt01*tmp4*sO3*tmp3*tmp7*tmp12*tmp32;
double tmp311 = -4*tmp0*sO3*tmp5*tmp10*tmp12*tmp32;
double tmp312 = 4*tmp0*sO1*tmp9*tmp10*tmp12*tmp32;
double tmp313 = 2*Dt01*tmp4*sO3*tmp2*tmp10*tmp12*tmp32;
double tmp314 = -2*Dt01*tmp4*sO1*tmp7*tmp10*tmp12*tmp32;
double tmp315 = -4*tmp0*sO1*tmp9*tmp2*tmp21*tmp32;
double tmp316 = 4*tmp0*sO1*tmp6*tmp3*tmp21*tmp32;
double tmp317 = -4*Dt01*tmp4*sO2*tmp2*tmp3*tmp21*tmp32;
double tmp318 = 4*Dt01*tmp4*sO3*tmp17*tmp21*tmp32;
double tmp319 = 4*tmp0*sO1*tmp5*tmp7*tmp21*tmp32;
double tmp320 = 2*Dt01*tmp4*sO1*tmp2*tmp7*tmp21*tmp32;
double tmp321 = 2*Dt01*tmp4*sO3*tmp13*tmp21*tmp32;
double tmp322 = -4*tmp0*sO1*tmp8*tmp10*tmp21*tmp32;
double tmp323 = -2*Dt01*tmp4*sO1*tmp3*tmp10*tmp21*tmp32;
double tmp324 = -4*Dt01*tmp4*sO2*tmp7*tmp10*tmp21*tmp32;
double tmp325 = 2*Dt01*tmp4*sO3*tmp22*tmp21*tmp32;
double tmp326 = -2*tmp31*tmp21*tmp32;
double tmp327 = -4*tmp0*sO3*tmp8*tmp2*tmp39;
double tmp328 = 4*tmp0*sO3*tmp5*tmp3*tmp39;
double tmp329 = -2*Dt01*tmp4*sO3*tmp2*tmp3*tmp39;
double tmp330 = -4*Dt01*tmp4*sO2*tmp17*tmp39;
double tmp331 = -4*tmp0*sO3*tmp6*tmp7*tmp39;
double tmp332 = 4*Dt01*tmp4*sO1*tmp3*tmp7*tmp39;
double tmp333 = 4*tmp0*sO3*tmp9*tmp10*tmp39;
double tmp334 = 2*Dt01*tmp4*sO3*tmp7*tmp10*tmp39;
double tmp335 = -4*Dt01*tmp4*sO2*tmp22*tmp39;
double tmp336 = 2*tmp55*tmp39;
double tmp337 = tmp200 + tmp201 + tmp202 + tmp203 + tmp204 + tmp205 + tmp206 + tmp207 + tmp208 + tmp209 + tmp210 + tmp211 + tmp212 + tmp213 + tmp214 + tmp215 + tmp216 + tmp217 + tmp218 + tmp219 + tmp220 + tmp221 + tmp222 + tmp223 + tmp224 + tmp225 + tmp226 + tmp227 + tmp228 + tmp229 + tmp237 + tmp238 + tmp239 + tmp240 + tmp241 + tmp242 + tmp243 + tmp244 + tmp245 + tmp246 + tmp247 + tmp248 + tmp249 + tmp250 + tmp251 + tmp252 + tmp253 + tmp254 + tmp255 + tmp256 + tmp257 + tmp258 + tmp259 + tmp260 + tmp261 + tmp262 + tmp263 + tmp264 + tmp265 + tmp266 + tmp267 + tmp268 + tmp269 + tmp270 + tmp271 + tmp272 + tmp273 + tmp274 + tmp275 + tmp276 + tmp277 + tmp278 + tmp279 + tmp280 + tmp281 + tmp282 + tmp283 + tmp284 + tmp285 + tmp286 + tmp287 + tmp288 + tmp289 + tmp290 + tmp291 + tmp292 + tmp293 + tmp294 + tmp295 + tmp296 + tmp297 + tmp302 + tmp303 + tmp304 + tmp305 + tmp306 + tmp307 + tmp308 + tmp309 + tmp310 + tmp311 + tmp312 + tmp313 + tmp314 + tmp315 + tmp316 + tmp317 + tmp318 + tmp319 + tmp320 + tmp321 + tmp322 + tmp323 + tmp324 + tmp325 + tmp326 + tmp327 + tmp328 + tmp329 + tmp330 + tmp331 + tmp332 + tmp333 + tmp334 + tmp335 + tmp336;
double tmp338 = std::sqrt(tmp49);
double tmp339 = std::pow(tmp4,-2);
double tmp340 = 1/Dt12;
double tmp341 = std::pow(tmp11,2);
double tmp342 = std::pow(tmp2,2);
double tmp343 = tmp19 + tmp20;
J(1+_OFF,1+_OFF) = -4*tmp40*tmp41*tmp42*(qOS3 + qOS1*qOS2*tmp50)*tmp199 - 4*tmp40*tmp41*tmp42*(qOS2 - qOS1*qOS3*tmp50)*tmp337;
J(2+_OFF,1+_OFF) = -4*tmp40*tmp41*tmp42*(-(tmp43*tmp50) + tmp338)*tmp199 - 4*tmp40*tmp41*tmp42*(qOS2 + qOS1*qOS3*tmp50)*(-(tmp0*tmp33) + Dt01*Dt12*tmp23 + tmp0*tmp23 - 2*tmp0*sO3*tmp9*tmp2 + 2*tmp0*sO2*tmp6*tmp2 + 2*tmp0*sO2*tmp9*tmp3 + 2*tmp0*sO3*tmp6*tmp3 + 2*tmp0*sO3*tmp5*tmp7 - 2*tmp0*sO2*tmp8*tmp7 - 2*Dt01*tmp4*sO2*tmp3*tmp7 + 2*Dt01*tmp4*sO1*tmp13 - 2*tmp0*sO2*tmp5*tmp10 - 2*tmp0*sO3*tmp8*tmp10 - 2*Dt01*tmp4*sO3*tmp3*tmp10 + 2*Dt01*tmp4*sO1*tmp22 - Dt01*Dt12*tmp35 + 2*Dt01*Dt12*sO3*tmp7*tmp11 - 2*Dt01*Dt12*sO2*tmp10*tmp11 + 2*Dt01*Dt12*sO2*tmp7*tmp12 + 2*Dt01*Dt12*sO3*tmp10*tmp12 - 4*tmp0*sO2*tmp9*tmp2*tmp11*tmp12 - 4*tmp0*sO3*tmp6*tmp2*tmp11*tmp12 - 4*tmp0*sO3*tmp9*tmp3*tmp11*tmp12 + 4*tmp0*sO2*tmp6*tmp3*tmp11*tmp12 + 4*tmp0*sO2*tmp5*tmp7*tmp11*tmp12 + 4*tmp0*sO3*tmp8*tmp7*tmp11*tmp12 + 2*Dt01*tmp4*sO2*tmp2*tmp7*tmp11*tmp12 + 2*Dt01*tmp4*sO3*tmp3*tmp7*tmp11*tmp12 + 4*tmp0*sO3*tmp5*tmp10*tmp11*tmp12 - 4*tmp0*sO2*tmp8*tmp10*tmp11*tmp12 + 2*Dt01*tmp4*sO3*tmp2*tmp10*tmp11*tmp12 - 2*Dt01*tmp4*sO2*tmp3*tmp10*tmp11*tmp12 + 4*tmp0*sO3*tmp9*tmp2*tmp16 - 4*tmp0*sO2*tmp6*tmp2*tmp16 - 4*tmp0*sO2*tmp9*tmp3*tmp16 - 4*tmp0*sO3*tmp6*tmp3*tmp16 - 4*tmp0*sO3*tmp5*tmp7*tmp16 + 4*tmp0*sO2*tmp8*tmp7*tmp16 - 2*Dt01*tmp4*sO3*tmp2*tmp7*tmp16 + 2*Dt01*tmp4*sO2*tmp3*tmp7*tmp16 + 4*tmp0*sO2*tmp5*tmp10*tmp16 + 4*tmp0*sO3*tmp8*tmp10*tmp16 + 2*Dt01*tmp4*sO2*tmp2*tmp10*tmp16 + 2*Dt01*tmp4*sO3*tmp3*tmp10*tmp16 - 2*Dt01*Dt12*sO3*tmp2*tmp21 - 2*Dt01*Dt12*sO2*tmp3*tmp21 + 4*tmp0*sO2*tmp8*tmp2*tmp11*tmp21 - 4*tmp0*sO2*tmp5*tmp3*tmp11*tmp21 + 2*Dt01*tmp4*sO2*tmp2*tmp3*tmp11*tmp21 - 2*Dt01*tmp4*sO3*tmp17*tmp11*tmp21 + 4*tmp0*sO2*tmp6*tmp7*tmp11*tmp21 - 4*Dt01*tmp4*sO1*tmp2*tmp7*tmp11*tmp21 - 4*tmp0*sO2*tmp9*tmp10*tmp11*tmp21 + 4*Dt01*tmp4*sO1*tmp3*tmp10*tmp11*tmp21 + 2*Dt01*tmp4*sO2*tmp7*tmp10*tmp11*tmp21 + 2*Dt01*tmp4*sO3*tmp22*tmp11*tmp21 + 2*Dt12*(Dt12*tmp27 + Dt01*tmp343)*tmp11*tmp21 - 4*tmp0*sO3*tmp8*tmp2*tmp12*tmp21 + 4*tmp0*sO3*tmp5*tmp3*tmp12*tmp21 + 2*Dt01*tmp4*sO3*tmp2*tmp3*tmp12*tmp21 + 2*Dt01*tmp4*sO2*tmp17*tmp12*tmp21 - 4*tmp0*sO3*tmp6*tmp7*tmp12*tmp21 - 4*Dt01*tmp4*sO1*tmp3*tmp7*tmp12*tmp21 + 2*Dt01*tmp4*sO2*tmp13*tmp12*tmp21 + 4*tmp0*sO3*tmp9*tmp10*tmp12*tmp21 - 4*Dt01*tmp4*sO1*tmp2*tmp10*tmp12*tmp21 - 2*Dt01*tmp4*sO3*tmp7*tmp10*tmp12*tmp21 + 4*Dt01*tmp4*sO2*tmp22*tmp12*tmp21 - 2*tmp55*tmp12*tmp21 - 4*tmp0*sO2*tmp6*tmp2*tmp24 - 4*tmp0*sO2*tmp9*tmp3*tmp24 + 4*tmp0*sO2*tmp8*tmp7*tmp24 + 2*Dt01*tmp4*sO2*tmp3*tmp7*tmp24 - 4*Dt01*tmp4*sO1*tmp13*tmp24 + 4*tmp0*sO2*tmp5*tmp10*tmp24 - 2*Dt01*tmp4*sO2*tmp2*tmp10*tmp24 + 4*Dt01*tmp4*sO3*tmp3*tmp10*tmp24 - 4*Dt01*tmp4*sO1*tmp22*tmp24 + 2*tmp61*tmp24 + 2*Dt01*Dt12*sO2*tmp2*tmp32 - 2*Dt01*Dt12*sO3*tmp3*tmp32 + 4*tmp0*sO3*tmp8*tmp2*tmp11*tmp32 - 4*tmp0*sO3*tmp5*tmp3*tmp11*tmp32 + 2*Dt01*tmp4*sO3*tmp2*tmp3*tmp11*tmp32 + 2*Dt01*tmp4*sO2*tmp17*tmp11*tmp32 + 4*tmp0*sO3*tmp6*tmp7*tmp11*tmp32 - 4*Dt01*tmp4*sO1*tmp3*tmp7*tmp11*tmp32 - 2*Dt01*tmp4*sO2*tmp13*tmp11*tmp32 - 4*tmp0*sO3*tmp9*tmp10*tmp11*tmp32 - 4*Dt01*tmp4*sO1*tmp2*tmp10*tmp11*tmp32 - 2*Dt01*tmp4*sO3*tmp7*tmp10*tmp11*tmp32 + 2*Dt12*(Dt12*(-tmp36 + tmp14) + Dt01*(tmp14 - tmp38))*tmp11*tmp32 + 4*tmp0*sO2*tmp8*tmp2*tmp12*tmp32 - 4*tmp0*sO2*tmp5*tmp3*tmp12*tmp32 - 2*Dt01*tmp4*sO2*tmp2*tmp3*tmp12*tmp32 + 2*Dt01*tmp4*sO3*tmp17*tmp12*tmp32 + 4*tmp0*sO2*tmp6*tmp7*tmp12*tmp32 + 4*Dt01*tmp4*sO1*tmp2*tmp7*tmp12*tmp32 + 4*Dt01*tmp4*sO3*tmp13*tmp12*tmp32 - 4*tmp0*sO2*tmp9*tmp10*tmp12*tmp32 - 4*Dt01*tmp4*sO1*tmp3*tmp10*tmp12*tmp32 - 2*Dt01*tmp4*sO2*tmp7*tmp10*tmp12*tmp32 + 2*Dt01*tmp4*sO3*tmp22*tmp12*tmp32 - 2*tmp31*tmp12*tmp32 + 4*tmp0*sO2*tmp9*tmp2*tmp21*tmp32 - 4*tmp0*sO3*tmp6*tmp2*tmp21*tmp32 - 4*tmp0*sO3*tmp9*tmp3*tmp21*tmp32 - 4*tmp0*sO2*tmp6*tmp3*tmp21*tmp32 - 4*tmp0*sO2*tmp5*tmp7*tmp21*tmp32 + 4*tmp0*sO3*tmp8*tmp7*tmp21*tmp32 + 2*Dt01*tmp4*sO2*tmp2*tmp7*tmp21*tmp32 - 2*Dt01*tmp4*sO3*tmp3*tmp7*tmp21*tmp32 + 4*tmp0*sO3*tmp5*tmp10*tmp21*tmp32 + 4*tmp0*sO2*tmp8*tmp10*tmp21*tmp32 - 2*Dt01*tmp4*sO3*tmp2*tmp10*tmp21*tmp32 - 2*Dt01*tmp4*sO2*tmp3*tmp10*tmp21*tmp32 + 4*tmp0*sO3*tmp9*tmp2*tmp39 - 4*tmp0*sO3*tmp6*tmp3*tmp39 - 4*tmp0*sO3*tmp5*tmp7*tmp39 + 2*Dt01*tmp4*sO3*tmp2*tmp7*tmp39 + 4*Dt01*tmp4*sO2*tmp3*tmp7*tmp39 - 4*Dt01*tmp4*sO1*tmp13*tmp39 + 4*tmp0*sO3*tmp8*tmp10*tmp39 + 2*Dt01*tmp4*sO3*tmp3*tmp10*tmp39 - 4*Dt01*tmp4*sO1*tmp22*tmp39 + 2*tmp61*tmp39) + 8*tmp40*tmp41*tmp42*qOS1*tmp337;
J(3+_OFF,1+_OFF) = 8*tmp40*tmp41*tmp42*qOS1*tmp199 - 4*tmp40*tmp41*tmp42*(tmp43*tmp50 - tmp338)*tmp337 + 2*(qOS3 - qOS1*qOS2*tmp50)*(4*tmp339*sO3*tmp9*tmp2 + 4*tmp40*Dt12*tmp339*sO3*tmp9*tmp2 - 4*tmp339*sO2*tmp6*tmp2 - 4*tmp40*Dt12*tmp339*sO2*tmp6*tmp2 - 4*tmp339*sO2*tmp9*tmp3 - 4*tmp40*Dt12*tmp339*sO2*tmp9*tmp3 - 4*tmp339*sO3*tmp6*tmp3 - 4*tmp40*Dt12*tmp339*sO3*tmp6*tmp3 - 4*tmp339*sO3*tmp5*tmp7 - 4*tmp40*Dt12*tmp339*sO3*tmp5*tmp7 + 4*tmp339*sO2*tmp8*tmp7 + 4*tmp40*Dt12*tmp339*sO2*tmp8*tmp7 + 4*tmp339*sO2*tmp5*tmp10 + 4*tmp40*Dt12*tmp339*sO2*tmp5*tmp10 + 4*tmp339*sO3*tmp8*tmp10 + 4*tmp40*Dt12*tmp339*sO3*tmp8*tmp10 - 4*tmp339*sO3*tmp7*tmp11 - 4*Dt01*tmp340*tmp339*sO3*tmp7*tmp11 + 4*tmp339*sO2*tmp10*tmp11 + 4*Dt01*tmp340*tmp339*sO2*tmp10*tmp11 + 4*tmp41*sO2*tmp3*tmp7*tmp341 - 4*tmp41*sO1*tmp13*tmp341 + 4*tmp41*sO3*tmp3*tmp10*tmp341 - 4*tmp41*sO1*tmp22*tmp341 - 4*tmp339*sO2*tmp7*tmp12 - 4*Dt01*tmp340*tmp339*sO2*tmp7*tmp12 - 4*tmp339*sO3*tmp10*tmp12 - 4*Dt01*tmp340*tmp339*sO3*tmp10*tmp12 + 8*tmp339*sO2*tmp9*tmp2*tmp11*tmp12 + 8*tmp40*Dt12*tmp339*sO2*tmp9*tmp2*tmp11*tmp12 + 8*tmp339*sO3*tmp6*tmp2*tmp11*tmp12 + 8*tmp40*Dt12*tmp339*sO3*tmp6*tmp2*tmp11*tmp12 + 8*tmp339*sO3*tmp9*tmp3*tmp11*tmp12 + 8*tmp40*Dt12*tmp339*sO3*tmp9*tmp3*tmp11*tmp12 - 8*tmp339*sO2*tmp6*tmp3*tmp11*tmp12 - 8*tmp40*Dt12*tmp339*sO2*tmp6*tmp3*tmp11*tmp12 - 8*tmp339*sO2*tmp5*tmp7*tmp11*tmp12 - 8*tmp40*Dt12*tmp339*sO2*tmp5*tmp7*tmp11*tmp12 - 8*tmp339*sO3*tmp8*tmp7*tmp11*tmp12 - 8*tmp40*Dt12*tmp339*sO3*tmp8*tmp7*tmp11*tmp12 - 4*tmp41*sO2*tmp2*tmp7*tmp11*tmp12 - 4*tmp41*sO3*tmp3*tmp7*tmp11*tmp12 - 8*tmp339*sO3*tmp5*tmp10*tmp11*tmp12 - 8*tmp40*Dt12*tmp339*sO3*tmp5*tmp10*tmp11*tmp12 + 8*tmp339*sO2*tmp8*tmp10*tmp11*tmp12 + 8*tmp40*Dt12*tmp339*sO2*tmp8*tmp10*tmp11*tmp12 - 4*tmp41*sO3*tmp2*tmp10*tmp11*tmp12 + 4*tmp41*sO2*tmp3*tmp10*tmp11*tmp12 - 8*tmp339*sO3*tmp9*tmp2*tmp16 - 8*tmp40*Dt12*tmp339*sO3*tmp9*tmp2*tmp16 + 8*tmp339*sO2*tmp6*tmp2*tmp16 + 8*tmp40*Dt12*tmp339*sO2*tmp6*tmp2*tmp16 + 8*tmp339*sO2*tmp9*tmp3*tmp16 + 8*tmp40*Dt12*tmp339*sO2*tmp9*tmp3*tmp16 + 8*tmp339*sO3*tmp6*tmp3*tmp16 + 8*tmp40*Dt12*tmp339*sO3*tmp6*tmp3*tmp16 + 8*tmp339*sO3*tmp5*tmp7*tmp16 + 8*tmp40*Dt12*tmp339*sO3*tmp5*tmp7*tmp16 - 8*tmp339*sO2*tmp8*tmp7*tmp16 - 8*tmp40*Dt12*tmp339*sO2*tmp8*tmp7*tmp16 + 4*tmp41*sO3*tmp2*tmp7*tmp16 - 4*tmp41*sO1*tmp13*tmp16 - 8*tmp339*sO2*tmp5*tmp10*tmp16 - 8*tmp40*Dt12*tmp339*sO2*tmp5*tmp10*tmp16 - 8*tmp339*sO3*tmp8*tmp10*tmp16 - 8*tmp40*Dt12*tmp339*sO3*tmp8*tmp10*tmp16 - 4*tmp41*sO2*tmp2*tmp10*tmp16 - 4*tmp41*sO1*tmp22*tmp16 + 4*tmp339*sO3*tmp2*tmp21 + 4*Dt01*tmp340*tmp339*sO3*tmp2*tmp21 + 4*tmp339*sO2*tmp3*tmp21 + 4*Dt01*tmp340*tmp339*sO2*tmp3*tmp21 - 8*tmp339*sO2*tmp8*tmp2*tmp11*tmp21 - 8*tmp40*Dt12*tmp339*sO2*tmp8*tmp2*tmp11*tmp21 + 8*tmp339*sO2*tmp5*tmp3*tmp11*tmp21 + 8*tmp40*Dt12*tmp339*sO2*tmp5*tmp3*tmp11*tmp21 - 4*tmp41*sO2*tmp2*tmp3*tmp11*tmp21 + 4*tmp41*sO3*tmp17*tmp11*tmp21 - 8*tmp339*sO2*tmp6*tmp7*tmp11*tmp21 - 8*tmp40*Dt12*tmp339*sO2*tmp6*tmp7*tmp11*tmp21 + 8*tmp41*sO1*tmp2*tmp7*tmp11*tmp21 + 8*tmp339*sO2*tmp9*tmp10*tmp11*tmp21 + 8*tmp40*Dt12*tmp339*sO2*tmp9*tmp10*tmp11*tmp21 - 8*tmp41*sO1*tmp3*tmp10*tmp11*tmp21 - 4*tmp41*sO2*tmp7*tmp10*tmp11*tmp21 - 4*tmp41*sO3*tmp22*tmp11*tmp21 + 8*tmp339*sO3*tmp8*tmp2*tmp12*tmp21 + 8*tmp40*Dt12*tmp339*sO3*tmp8*tmp2*tmp12*tmp21 + 4*tmp41*sO2*tmp342*tmp12*tmp21 - 8*tmp339*sO3*tmp5*tmp3*tmp12*tmp21 - 8*tmp40*Dt12*tmp339*sO3*tmp5*tmp3*tmp12*tmp21 - 4*tmp41*sO3*tmp2*tmp3*tmp12*tmp21 + 8*tmp339*sO3*tmp6*tmp7*tmp12*tmp21 + 8*tmp40*Dt12*tmp339*sO3*tmp6*tmp7*tmp12*tmp21 + 8*tmp41*sO1*tmp3*tmp7*tmp12*tmp21 - 8*tmp339*sO3*tmp9*tmp10*tmp12*tmp21 - 8*tmp40*Dt12*tmp339*sO3*tmp9*tmp10*tmp12*tmp21 + 8*tmp41*sO1*tmp2*tmp10*tmp12*tmp21 + 4*tmp41*sO3*tmp7*tmp10*tmp12*tmp21 - 4*tmp41*sO2*tmp22*tmp12*tmp21 + 8*tmp339*sO2*tmp6*tmp2*tmp24 + 8*tmp40*Dt12*tmp339*sO2*tmp6*tmp2*tmp24 - 4*tmp41*sO1*tmp342*tmp24 + 8*tmp339*sO2*tmp9*tmp3*tmp24 + 8*tmp40*Dt12*tmp339*sO2*tmp9*tmp3*tmp24 - 4*tmp41*sO1*tmp17*tmp24 - 8*tmp339*sO2*tmp8*tmp7*tmp24 - 8*tmp40*Dt12*tmp339*sO2*tmp8*tmp7*tmp24 - 8*tmp339*sO2*tmp5*tmp10*tmp24 - 8*tmp40*Dt12*tmp339*sO2*tmp5*tmp10*tmp24 + 4*tmp41*sO2*tmp2*tmp10*tmp24 - 4*tmp41*sO3*tmp3*tmp10*tmp24 - 4*tmp339*sO2*tmp2*tmp32 - 4*Dt01*tmp340*tmp339*sO2*tmp2*tmp32 + 4*tmp339*sO3*tmp3*tmp32 + 4*Dt01*tmp340*tmp339*sO3*tmp3*tmp32 - 8*tmp339*sO3*tmp8*tmp2*tmp11*tmp32 - 8*tmp40*Dt12*tmp339*sO3*tmp8*tmp2*tmp11*tmp32 + 8*tmp339*sO3*tmp5*tmp3*tmp11*tmp32 + 8*tmp40*Dt12*tmp339*sO3*tmp5*tmp3*tmp11*tmp32 - 4*tmp41*sO3*tmp2*tmp3*tmp11*tmp32 - 4*tmp41*sO2*tmp17*tmp11*tmp32 - 8*tmp339*sO3*tmp6*tmp7*tmp11*tmp32 - 8*tmp40*Dt12*tmp339*sO3*tmp6*tmp7*tmp11*tmp32 + 8*tmp41*sO1*tmp3*tmp7*tmp11*tmp32 + 4*tmp41*sO2*tmp13*tmp11*tmp32 + 8*tmp339*sO3*tmp9*tmp10*tmp11*tmp32 + 8*tmp40*Dt12*tmp339*sO3*tmp9*tmp10*tmp11*tmp32 + 8*tmp41*sO1*tmp2*tmp10*tmp11*tmp32 + 4*tmp41*sO3*tmp7*tmp10*tmp11*tmp32 - 8*tmp339*sO2*tmp8*tmp2*tmp12*tmp32 - 8*tmp40*Dt12*tmp339*sO2*tmp8*tmp2*tmp12*tmp32 + 4*tmp41*sO3*tmp342*tmp12*tmp32 + 8*tmp339*sO2*tmp5*tmp3*tmp12*tmp32 + 8*tmp40*Dt12*tmp339*sO2*tmp5*tmp3*tmp12*tmp32 + 4*tmp41*sO2*tmp2*tmp3*tmp12*tmp32 - 8*tmp339*sO2*tmp6*tmp7*tmp12*tmp32 - 8*tmp40*Dt12*tmp339*sO2*tmp6*tmp7*tmp12*tmp32 - 8*tmp41*sO1*tmp2*tmp7*tmp12*tmp32 - 4*tmp41*sO3*tmp13*tmp12*tmp32 + 8*tmp339*sO2*tmp9*tmp10*tmp12*tmp32 + 8*tmp40*Dt12*tmp339*sO2*tmp9*tmp10*tmp12*tmp32 + 8*tmp41*sO1*tmp3*tmp10*tmp12*tmp32 + 4*tmp41*sO2*tmp7*tmp10*tmp12*tmp32 - 8*tmp339*sO2*tmp9*tmp2*tmp21*tmp32 - 8*tmp40*Dt12*tmp339*sO2*tmp9*tmp2*tmp21*tmp32 + 8*tmp339*sO3*tmp6*tmp2*tmp21*tmp32 + 8*tmp40*Dt12*tmp339*sO3*tmp6*tmp2*tmp21*tmp32 + 8*tmp339*sO3*tmp9*tmp3*tmp21*tmp32 + 8*tmp40*Dt12*tmp339*sO3*tmp9*tmp3*tmp21*tmp32 + 8*tmp339*sO2*tmp6*tmp3*tmp21*tmp32 + 8*tmp40*Dt12*tmp339*sO2*tmp6*tmp3*tmp21*tmp32 + 8*tmp339*sO2*tmp5*tmp7*tmp21*tmp32 + 8*tmp40*Dt12*tmp339*sO2*tmp5*tmp7*tmp21*tmp32 - 8*tmp339*sO3*tmp8*tmp7*tmp21*tmp32 - 8*tmp40*Dt12*tmp339*sO3*tmp8*tmp7*tmp21*tmp32 - 4*tmp41*sO2*tmp2*tmp7*tmp21*tmp32 + 4*tmp41*sO3*tmp3*tmp7*tmp21*tmp32 - 8*tmp339*sO3*tmp5*tmp10*tmp21*tmp32 - 8*tmp40*Dt12*tmp339*sO3*tmp5*tmp10*tmp21*tmp32 - 8*tmp339*sO2*tmp8*tmp10*tmp21*tmp32 - 8*tmp40*Dt12*tmp339*sO2*tmp8*tmp10*tmp21*tmp32 + 4*tmp41*sO3*tmp2*tmp10*tmp21*tmp32 + 4*tmp41*sO2*tmp3*tmp10*tmp21*tmp32 - 8*tmp339*sO3*tmp9*tmp2*tmp39 - 8*tmp40*Dt12*tmp339*sO3*tmp9*tmp2*tmp39 - 4*tmp41*sO1*tmp342*tmp39 + 8*tmp339*sO3*tmp6*tmp3*tmp39 + 8*tmp40*Dt12*tmp339*sO3*tmp6*tmp3*tmp39 - 4*tmp41*sO1*tmp17*tmp39 + 8*tmp339*sO3*tmp5*tmp7*tmp39 + 8*tmp40*Dt12*tmp339*sO3*tmp5*tmp7*tmp39 - 4*tmp41*sO3*tmp2*tmp7*tmp39 - 4*tmp41*sO2*tmp3*tmp7*tmp39 - 8*tmp339*sO3*tmp8*tmp10*tmp39 - 8*tmp40*Dt12*tmp339*sO3*tmp8*tmp10*tmp39 + 2*tmp42*(2*(tmp40*tmp37 + tmp340*tmp93)*(tmp12*tmp21 + tmp11*tmp32) + 2*(tmp40*tmp27 + tmp340*tmp343)*(-(tmp11*tmp21) + tmp12*tmp32) + tmp40*tmp340*tmp125*(-1 + 2*tmp24 + 2*tmp39)));
