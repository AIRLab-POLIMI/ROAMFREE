double tmp0 = x(4+_OFF);
double tmp1 = x(6+_OFF);
double tmp2 = x(5+_OFF);
double tmp3 = x(7+_OFF);
double tmp4 = x(30+_OFF);
double tmp5 = x(31+_OFF);
double tmp6 = x(32+_OFF);
double tmp7 = x(33+_OFF);
double tmp8 = tmp5*tmp6;
double tmp9 = -(tmp4*tmp7);
double tmp10 = tmp8 + tmp9;
double tmp11 = tmp4*tmp5;
double tmp12 = tmp6*tmp7;
double tmp13 = tmp11 + tmp12;
double tmp14 = std::pow(tmp4,2);
double tmp15 = std::pow(tmp5,2);
double tmp16 = -tmp15;
double tmp17 = std::pow(tmp6,2);
double tmp18 = std::pow(tmp7,2);
double tmp19 = -tmp18;
double tmp20 = tmp14 + tmp16 + tmp17 + tmp19;
double tmp21 = wind(2+_OFF);
double tmp22 = wind(3+_OFF);
double tmp23 = wind(1+_OFF);
double tmp24 = -2*tmp23*tmp10;
double tmp25 = -2*tmp22*tmp13;
double tmp26 = -(tmp21*tmp20);
double tmp27 = x(35+_OFF);
double tmp28 = tmp24 + tmp25 + tmp26 + tmp27;
double tmp29 = tmp5*tmp7;
double tmp30 = -tmp17;
double tmp31 = cp(2+_OFF);
double tmp32 = tmp2*tmp1;
double tmp33 = tmp0*tmp3;
double tmp34 = tmp32 + tmp33;
double tmp35 = tmp4*tmp7;
double tmp36 = tmp8 + tmp35;
double tmp37 = -(tmp0*tmp1);
double tmp38 = tmp2*tmp3;
double tmp39 = tmp37 + tmp38;
double tmp40 = -(tmp4*tmp6);
double tmp41 = tmp40 + tmp29;
double tmp42 = std::pow(tmp0,2);
double tmp43 = std::pow(tmp2,2);
double tmp44 = std::pow(tmp1,2);
double tmp45 = -tmp44;
double tmp46 = std::pow(tmp3,2);
double tmp47 = -tmp46;
double tmp48 = tmp42 + tmp43 + tmp45 + tmp47;
double tmp49 = tmp14 + tmp15 + tmp30 + tmp19;
double tmp50 = -2*tmp21*tmp36;
double tmp51 = -2*tmp22*tmp41;
double tmp52 = -(tmp23*tmp49);
double tmp53 = x(34+_OFF);
double tmp54 = tmp50 + tmp51 + tmp52 + tmp53;
double tmp55 = std::pow(tmp54,2);
double tmp56 = tmp4*tmp6;
double tmp57 = tmp56 + tmp29;
double tmp58 = -2*tmp23*tmp57;
double tmp59 = -(tmp4*tmp5);
double tmp60 = tmp59 + tmp12;
double tmp61 = -2*tmp21*tmp60;
double tmp62 = tmp14 + tmp16 + tmp30 + tmp18;
double tmp63 = -(tmp22*tmp62);
double tmp64 = x(36+_OFF);
double tmp65 = tmp58 + tmp61 + tmp63 + tmp64;
double tmp66 = std::pow(tmp65,2);
double tmp67 = std::pow(tmp28,2);
double tmp68 = tmp55 + tmp67 + tmp66;
double tmp69 = tmp55 + tmp66;
double tmp70 = 1/std::sqrt(tmp69);
double tmp71 = 1/tmp68;
double tmp72 = -(tmp67*tmp71);
double tmp73 = 1 + tmp72;
double tmp74 = std::sqrt(tmp73);
double tmp75 = cp(4+_OFF);
double tmp76 = 1/tmp75;
double tmp77 = 2*tmp48*tmp10;
double tmp78 = 4*tmp39*tmp13;
double tmp79 = 2*tmp34*tmp20;
double tmp80 = tmp77 + tmp78 + tmp79;
double tmp81 = std::sqrt(tmp68);
double tmp82 = std::atan2(tmp65,tmp54);
double tmp83 = 4*tmp34*tmp36;
double tmp84 = 4*tmp39*tmp41;
double tmp85 = tmp48*tmp49;
double tmp86 = tmp83 + tmp84 + tmp85;
double tmp87 = 2*tmp48*tmp57;
double tmp88 = 4*tmp34*tmp60;
double tmp89 = 2*tmp39*tmp62;
double tmp90 = tmp87 + tmp88 + tmp89;
double tmp91 = std::pow(tmp82,2);
double tmp92 = 1/std::sqrt(tmp68);
double tmp93 = tmp28*tmp92;
double tmp94 = std::asin(tmp93);
double tmp95 = std::pow(tmp94,2);
double tmp96 = -tmp43;
double tmp97 = tmp42 + tmp96 + tmp44 + tmp47;
double tmp98 = tmp0*tmp2;
double tmp99 = tmp1*tmp3;
double tmp100 = tmp98 + tmp99;
double tmp101 = -(tmp0*tmp3);
double tmp102 = tmp32 + tmp101;
double tmp103 = 4*tmp102*tmp10;
double tmp104 = 4*tmp100*tmp13;
double tmp105 = tmp97*tmp20;
double tmp106 = tmp103 + tmp104 + tmp105;
double tmp107 = 2*tmp97*tmp36;
double tmp108 = 4*tmp100*tmp41;
double tmp109 = 2*tmp102*tmp49;
double tmp110 = tmp107 + tmp108 + tmp109;
double tmp111 = 4*tmp102*tmp57;
double tmp112 = 2*tmp97*tmp60;
double tmp113 = 2*tmp100*tmp62;
double tmp114 = tmp111 + tmp112 + tmp113;
double tmp115 = -(tmp0*tmp2);
double tmp116 = tmp115 + tmp99;
double tmp117 = tmp42 + tmp96 + tmp45 + tmp46;
double tmp118 = tmp0*tmp1;
double tmp119 = tmp118 + tmp38;
double tmp120 = 4*tmp119*tmp10;
double tmp121 = 2*tmp117*tmp13;
double tmp122 = 2*tmp116*tmp20;
double tmp123 = tmp120 + tmp121 + tmp122;
double tmp124 = 4*tmp116*tmp36;
double tmp125 = 2*tmp117*tmp41;
double tmp126 = 2*tmp119*tmp49;
double tmp127 = tmp124 + tmp125 + tmp126;
double tmp128 = 4*tmp119*tmp57;
double tmp129 = 4*tmp116*tmp60;
double tmp130 = tmp117*tmp62;
double tmp131 = tmp128 + tmp129 + tmp130;
J(1+_OFF,1+_OFF) = -(tmp76*(0.634*tmp31*tmp80*tmp28*tmp81 + 0.634*tmp31*tmp86*tmp54*tmp70*tmp68*tmp74 + 0.634*tmp31*tmp90*tmp65*tmp70*tmp68*tmp74));
J(1+_OFF,2+_OFF) = -(tmp76*(-0.634*tmp82*tmp31*tmp80*tmp28*tmp81 - 0.634*tmp82*tmp31*tmp86*tmp54*tmp70*tmp68*tmp74 - 0.634*tmp82*tmp31*tmp90*tmp65*tmp70*tmp68*tmp74));
J(1+_OFF,3+_OFF) = -(tmp76*(0.634*tmp91*tmp31*tmp80*tmp28*tmp81 + 0.634*tmp91*tmp31*tmp86*tmp54*tmp70*tmp68*tmp74 + 0.634*tmp91*tmp31*tmp90*tmp65*tmp70*tmp68*tmp74));
J(1+_OFF,4+_OFF) = -(tmp76*(0.634*tmp95*tmp31*tmp80*tmp28*tmp81 + 0.634*tmp95*tmp31*tmp86*tmp54*tmp70*tmp68*tmp74 + 0.634*tmp95*tmp31*tmp90*tmp65*tmp70*tmp68*tmp74));
J(2+_OFF,1+_OFF) = -(tmp76*(0.634*tmp31*tmp106*tmp28*tmp81 + 0.634*tmp31*tmp110*tmp54*tmp70*tmp68*tmp74 + 0.634*tmp31*tmp114*tmp65*tmp70*tmp68*tmp74));
J(2+_OFF,2+_OFF) = -(tmp76*(-0.634*tmp82*tmp31*tmp106*tmp28*tmp81 - 0.634*tmp82*tmp31*tmp110*tmp54*tmp70*tmp68*tmp74 - 0.634*tmp82*tmp31*tmp114*tmp65*tmp70*tmp68*tmp74));
J(2+_OFF,3+_OFF) = -(tmp76*(0.634*tmp91*tmp31*tmp106*tmp28*tmp81 + 0.634*tmp91*tmp31*tmp110*tmp54*tmp70*tmp68*tmp74 + 0.634*tmp91*tmp31*tmp114*tmp65*tmp70*tmp68*tmp74));
J(2+_OFF,4+_OFF) = -(tmp76*(0.634*tmp95*tmp31*tmp106*tmp28*tmp81 + 0.634*tmp95*tmp31*tmp110*tmp54*tmp70*tmp68*tmp74 + 0.634*tmp95*tmp31*tmp114*tmp65*tmp70*tmp68*tmp74));
J(3+_OFF,1+_OFF) = -(tmp76*(0.634*tmp31*tmp123*tmp28*tmp81 + 0.634*tmp31*tmp127*tmp54*tmp70*tmp68*tmp74 + 0.634*tmp31*tmp131*tmp65*tmp70*tmp68*tmp74));
J(3+_OFF,2+_OFF) = -(tmp76*(-0.634*tmp82*tmp31*tmp123*tmp28*tmp81 - 0.634*tmp82*tmp31*tmp127*tmp54*tmp70*tmp68*tmp74 - 0.634*tmp82*tmp31*tmp131*tmp65*tmp70*tmp68*tmp74));
J(3+_OFF,3+_OFF) = -(tmp76*(0.634*tmp91*tmp31*tmp123*tmp28*tmp81 + 0.634*tmp91*tmp31*tmp127*tmp54*tmp70*tmp68*tmp74 + 0.634*tmp91*tmp31*tmp131*tmp65*tmp70*tmp68*tmp74));
J(3+_OFF,4+_OFF) = -(tmp76*(0.634*tmp95*tmp31*tmp123*tmp28*tmp81 + 0.634*tmp95*tmp31*tmp127*tmp54*tmp70*tmp68*tmp74 + 0.634*tmp95*tmp31*tmp131*tmp65*tmp70*tmp68*tmp74));
J(4+_OFF,1+_OFF) = 0;
J(4+_OFF,2+_OFF) = 0;
J(4+_OFF,3+_OFF) = 0;
J(4+_OFF,4+_OFF) = 0;
J(5+_OFF,1+_OFF) = 0;
J(5+_OFF,2+_OFF) = 0;
J(5+_OFF,3+_OFF) = 0;
J(5+_OFF,4+_OFF) = 0;
J(6+_OFF,1+_OFF) = 0;
J(6+_OFF,2+_OFF) = 0;
J(6+_OFF,3+_OFF) = 0;
J(6+_OFF,4+_OFF) = 0;
