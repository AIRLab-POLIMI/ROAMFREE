double tmp0 = x(4+_OFF);
double tmp1 = x(6+_OFF);
double tmp2 = x(5+_OFF);
double tmp3 = x(7+_OFF);
double tmp4 = x(30+_OFF);
double tmp5 = x(31+_OFF);
double tmp6 = x(32+_OFF);
double tmp7 = x(33+_OFF);
double tmp8 = tmp5*tmp6;
double tmp9 = std::pow(tmp4,2);
double tmp10 = std::pow(tmp5,2);
double tmp11 = std::pow(tmp6,2);
double tmp12 = std::pow(tmp7,2);
double tmp13 = -tmp12;
double tmp14 = wind(1+_OFF);
double tmp15 = tmp5*tmp7;
double tmp16 = wind(2+_OFF);
double tmp17 = tmp6*tmp7;
double tmp18 = wind(3+_OFF);
double tmp19 = -tmp10;
double tmp20 = -tmp11;
double tmp21 = tmp4*tmp7;
double tmp22 = tmp8 + tmp21;
double tmp23 = -2*tmp16*tmp22;
double tmp24 = -(tmp4*tmp6);
double tmp25 = tmp24 + tmp15;
double tmp26 = -2*tmp18*tmp25;
double tmp27 = tmp9 + tmp10 + tmp20 + tmp13;
double tmp28 = -(tmp14*tmp27);
double tmp29 = x(34+_OFF);
double tmp30 = tmp23 + tmp26 + tmp28 + tmp29;
double tmp31 = tmp4*tmp6;
double tmp32 = tmp31 + tmp15;
double tmp33 = -2*tmp14*tmp32;
double tmp34 = -(tmp4*tmp5);
double tmp35 = tmp34 + tmp17;
double tmp36 = -2*tmp16*tmp35;
double tmp37 = tmp9 + tmp19 + tmp20 + tmp12;
double tmp38 = -(tmp18*tmp37);
double tmp39 = x(36+_OFF);
double tmp40 = tmp33 + tmp36 + tmp38 + tmp39;
double tmp41 = std::atan2(tmp40,tmp30);
double tmp42 = -(tmp4*tmp7);
double tmp43 = tmp8 + tmp42;
double tmp44 = tmp4*tmp5;
double tmp45 = tmp44 + tmp17;
double tmp46 = tmp9 + tmp19 + tmp11 + tmp13;
double tmp47 = -2*tmp14*tmp43;
double tmp48 = -2*tmp18*tmp45;
double tmp49 = -(tmp16*tmp46);
double tmp50 = x(35+_OFF);
double tmp51 = tmp47 + tmp48 + tmp49 + tmp50;
double tmp52 = std::pow(tmp30,2);
double tmp53 = std::pow(tmp51,2);
double tmp54 = std::pow(tmp40,2);
double tmp55 = tmp52 + tmp53 + tmp54;
double tmp56 = 1/std::sqrt(tmp55);
double tmp57 = cp(2+_OFF);
double tmp58 = fDrag(1+_OFF);
double tmp59 = fDrag(2+_OFF);
double tmp60 = -(tmp41*tmp59);
double tmp61 = std::pow(tmp41,2);
double tmp62 = fDrag(3+_OFF);
double tmp63 = tmp61*tmp62;
double tmp64 = tmp51*tmp56;
double tmp65 = std::asin(tmp64);
double tmp66 = std::pow(tmp65,2);
double tmp67 = fDrag(4+_OFF);
double tmp68 = tmp66*tmp67;
double tmp69 = tmp58 + tmp60 + tmp63 + tmp68;
double tmp70 = -tmp9;
double tmp71 = tmp70 + tmp19 + tmp11 + tmp12;
double tmp72 = 2*tmp71*tmp30;
double tmp73 = -4*tmp43*tmp51;
double tmp74 = -4*tmp32*tmp40;
double tmp75 = tmp72 + tmp73 + tmp74;
double tmp76 = 1/tmp55;
double tmp77 = fLat(1+_OFF);
double tmp78 = -(tmp53*tmp76);
double tmp79 = 1 + tmp78;
double tmp80 = std::sqrt(tmp55);
double tmp81 = tmp52 + tmp54;
double tmp82 = 1/tmp81;
double tmp83 = -2*tmp32*tmp30*tmp82;
double tmp84 = 2*tmp14*tmp32;
double tmp85 = 2*tmp16*tmp35;
double tmp86 = tmp18*tmp37;
double tmp87 = -tmp39;
double tmp88 = tmp84 + tmp85 + tmp86 + tmp87;
double tmp89 = tmp71*tmp88*tmp82;
double tmp90 = tmp83 + tmp89;
double tmp91 = 1/std::sqrt(tmp79);
double tmp92 = std::pow(tmp55,-1.5);
double tmp93 = -(tmp51*tmp75*tmp92)/2.;
double tmp94 = -2*tmp43*tmp56;
double tmp95 = tmp93 + tmp94;
double tmp96 = cp(4+_OFF);
double tmp97 = 1/tmp96;
double tmp98 = std::pow(tmp0,2);
double tmp99 = std::pow(tmp2,2);
double tmp100 = std::pow(tmp1,2);
double tmp101 = -tmp100;
double tmp102 = std::pow(tmp3,2);
double tmp103 = -tmp102;
double tmp104 = tmp98 + tmp99 + tmp101 + tmp103;
double tmp105 = tmp2*tmp1;
double tmp106 = tmp0*tmp3;
double tmp107 = tmp105 + tmp106;
double tmp108 = -(tmp0*tmp1);
double tmp109 = tmp2*tmp3;
double tmp110 = tmp108 + tmp109;
double tmp111 = 1/std::sqrt(tmp81);
double tmp112 = fLift(1+_OFF);
double tmp113 = -tmp112;
double tmp114 = fLift(2+_OFF);
double tmp115 = tmp41*tmp114;
double tmp116 = tmp113 + tmp115;
double tmp117 = tmp72 + tmp74;
double tmp118 = std::pow(tmp81,-1.5);
double tmp119 = std::pow(tmp55,-2);
double tmp120 = tmp53*tmp75*tmp119;
double tmp121 = 4*tmp43*tmp51*tmp76;
double tmp122 = tmp120 + tmp121;
double tmp123 = std::sqrt(tmp79);
double tmp124 = -(tmp59*tmp90);
double tmp125 = 2*tmp41*tmp62*tmp90;
double tmp126 = 2*tmp65*tmp67*tmp91*tmp95;
double tmp127 = tmp124 + tmp125 + tmp126;
double tmp128 = cp(1+_OFF);
double tmp129 = 2*tmp104*tmp43;
double tmp130 = 4*tmp110*tmp45;
double tmp131 = 2*tmp107*tmp46;
double tmp132 = tmp129 + tmp130 + tmp131;
double tmp133 = tmp70 + tmp10 + tmp20 + tmp12;
double tmp134 = -4*tmp22*tmp30;
double tmp135 = 2*tmp133*tmp51;
double tmp136 = -4*tmp35*tmp40;
double tmp137 = tmp134 + tmp135 + tmp136;
double tmp138 = -2*tmp35*tmp30*tmp82;
double tmp139 = -2*tmp22*tmp88*tmp82;
double tmp140 = tmp138 + tmp139;
double tmp141 = -(tmp51*tmp137*tmp92)/2.;
double tmp142 = tmp133*tmp56;
double tmp143 = tmp141 + tmp142;
double tmp144 = 2*tmp104*tmp32;
double tmp145 = 4*tmp107*tmp35;
double tmp146 = 2*tmp110*tmp37;
double tmp147 = tmp144 + tmp145 + tmp146;
double tmp148 = tmp134 + tmp136;
double tmp149 = tmp53*tmp137*tmp119;
double tmp150 = -2*tmp133*tmp51*tmp76;
double tmp151 = tmp149 + tmp150;
double tmp152 = -(tmp59*tmp140);
double tmp153 = 2*tmp41*tmp62*tmp140;
double tmp154 = 2*tmp65*tmp67*tmp91*tmp143;
double tmp155 = tmp152 + tmp153 + tmp154;
double tmp156 = 4*tmp107*tmp22;
double tmp157 = 4*tmp110*tmp25;
double tmp158 = tmp104*tmp27;
double tmp159 = tmp156 + tmp157 + tmp158;
double tmp160 = std::pow(tmp128,2);
double tmp161 = std::pow(M_PI,-2);
double tmp162 = fThrust(3+_OFF);
double tmp163 = 1/M_PI;
double tmp164 = fThrust(2+_OFF);
double tmp165 = z(1+_OFF);
double tmp166 = -4*tmp25*tmp30;
double tmp167 = -4*tmp45*tmp51;
double tmp168 = tmp70 + tmp10 + tmp11 + tmp13;
double tmp169 = 2*tmp168*tmp40;
double tmp170 = tmp166 + tmp167 + tmp169;
double tmp171 = tmp168*tmp30*tmp82;
double tmp172 = -2*tmp25*tmp88*tmp82;
double tmp173 = tmp171 + tmp172;
double tmp174 = -(tmp51*tmp170*tmp92)/2.;
double tmp175 = -2*tmp45*tmp56;
double tmp176 = tmp174 + tmp175;
double tmp177 = tmp166 + tmp169;
double tmp178 = tmp53*tmp170*tmp119;
double tmp179 = 4*tmp45*tmp51*tmp76;
double tmp180 = tmp178 + tmp179;
double tmp181 = -(tmp59*tmp173);
double tmp182 = 2*tmp41*tmp62*tmp173;
double tmp183 = 2*tmp65*tmp67*tmp91*tmp176;
double tmp184 = tmp181 + tmp182 + tmp183;
double tmp185 = 0.317*tmp57*tmp69*tmp51*tmp75*tmp56;
double tmp186 = -1.268*tmp57*tmp69*tmp43*tmp80;
double tmp187 = 0.317*tmp65*tmp57*tmp77*tmp55*tmp122*tmp91;
double tmp188 = 0.634*tmp65*tmp57*tmp77*tmp75*tmp123;
double tmp189 = 0.634*tmp57*tmp77*tmp55*tmp95;
double tmp190 = 0.634*tmp57*tmp51*tmp80*tmp127;
double tmp191 = tmp185 + tmp186 + tmp187 + tmp188 + tmp189 + tmp190;
double tmp192 = -(tmp0*tmp3);
double tmp193 = tmp105 + tmp192;
double tmp194 = -tmp99;
double tmp195 = tmp98 + tmp194 + tmp100 + tmp103;
double tmp196 = tmp0*tmp2;
double tmp197 = tmp1*tmp3;
double tmp198 = tmp196 + tmp197;
double tmp199 = 0.634*tmp57*tmp116*tmp30*tmp75*tmp111;
double tmp200 = -0.317*tmp65*tmp57*tmp77*tmp51*tmp40*tmp75*tmp111*tmp56;
double tmp201 = 0.317*tmp65*tmp57*tmp77*tmp51*tmp40*tmp117*tmp118*tmp80;
double tmp202 = 1.268*tmp65*tmp57*tmp77*tmp32*tmp51*tmp111*tmp80;
double tmp203 = 1.268*tmp65*tmp57*tmp77*tmp43*tmp40*tmp111*tmp80;
double tmp204 = -0.317*tmp57*tmp116*tmp30*tmp117*tmp118*tmp55;
double tmp205 = 0.634*tmp57*tmp116*tmp71*tmp111*tmp55;
double tmp206 = 0.634*tmp57*tmp114*tmp30*tmp111*tmp55*tmp90;
double tmp207 = 0.317*tmp57*tmp69*tmp40*tmp111*tmp55*tmp122*tmp91;
double tmp208 = 0.634*tmp57*tmp69*tmp40*tmp75*tmp111*tmp123;
double tmp209 = -0.317*tmp57*tmp69*tmp40*tmp117*tmp118*tmp55*tmp123;
double tmp210 = -1.268*tmp57*tmp69*tmp32*tmp111*tmp55*tmp123;
double tmp211 = -0.634*tmp57*tmp77*tmp51*tmp40*tmp111*tmp80*tmp91*tmp95;
double tmp212 = 0.634*tmp57*tmp40*tmp111*tmp55*tmp123*tmp127;
double tmp213 = tmp199 + tmp200 + tmp201 + tmp202 + tmp203 + tmp204 + tmp205 + tmp206 + tmp207 + tmp208 + tmp209 + tmp210 + tmp211 + tmp212;
double tmp214 = -0.634*tmp57*tmp116*tmp40*tmp75*tmp111;
double tmp215 = -0.317*tmp65*tmp57*tmp77*tmp30*tmp51*tmp75*tmp111*tmp56;
double tmp216 = 0.317*tmp65*tmp57*tmp77*tmp30*tmp51*tmp117*tmp118*tmp80;
double tmp217 = 1.268*tmp65*tmp57*tmp77*tmp43*tmp30*tmp111*tmp80;
double tmp218 = -0.634*tmp65*tmp57*tmp77*tmp71*tmp51*tmp111*tmp80;
double tmp219 = 0.317*tmp57*tmp116*tmp40*tmp117*tmp118*tmp55;
double tmp220 = 1.268*tmp57*tmp116*tmp32*tmp111*tmp55;
double tmp221 = -0.634*tmp57*tmp114*tmp40*tmp111*tmp55*tmp90;
double tmp222 = 0.317*tmp57*tmp69*tmp30*tmp111*tmp55*tmp122*tmp91;
double tmp223 = 0.634*tmp57*tmp69*tmp30*tmp75*tmp111*tmp123;
double tmp224 = -0.317*tmp57*tmp69*tmp30*tmp117*tmp118*tmp55*tmp123;
double tmp225 = 0.634*tmp57*tmp69*tmp71*tmp111*tmp55*tmp123;
double tmp226 = -0.634*tmp57*tmp77*tmp30*tmp51*tmp111*tmp80*tmp91*tmp95;
double tmp227 = 0.634*tmp57*tmp30*tmp111*tmp55*tmp123*tmp127;
double tmp228 = tmp161*tmp162*tmp75;
double tmp229 = (tmp163*tmp128*tmp164*tmp75*tmp56*tmp165)/2.;
double tmp230 = tmp228 + tmp229;
double tmp231 = 1.268*tmp160*tmp230;
double tmp232 = tmp214 + tmp215 + tmp216 + tmp217 + tmp218 + tmp219 + tmp220 + tmp221 + tmp222 + tmp223 + tmp224 + tmp225 + tmp226 + tmp227 + tmp231;
double tmp233 = 4*tmp193*tmp43;
double tmp234 = 4*tmp198*tmp45;
double tmp235 = tmp195*tmp46;
double tmp236 = tmp233 + tmp234 + tmp235;
double tmp237 = 0.317*tmp57*tmp69*tmp51*tmp137*tmp56;
double tmp238 = 0.634*tmp57*tmp69*tmp133*tmp80;
double tmp239 = 0.317*tmp65*tmp57*tmp77*tmp55*tmp151*tmp91;
double tmp240 = 0.634*tmp65*tmp57*tmp77*tmp137*tmp123;
double tmp241 = 0.634*tmp57*tmp77*tmp55*tmp143;
double tmp242 = 0.634*tmp57*tmp51*tmp80*tmp155;
double tmp243 = tmp237 + tmp238 + tmp239 + tmp240 + tmp241 + tmp242;
double tmp244 = 4*tmp193*tmp32;
double tmp245 = 2*tmp195*tmp35;
double tmp246 = 2*tmp198*tmp37;
double tmp247 = tmp244 + tmp245 + tmp246;
double tmp248 = 0.634*tmp57*tmp116*tmp30*tmp137*tmp111;
double tmp249 = -0.317*tmp65*tmp57*tmp77*tmp51*tmp40*tmp137*tmp111*tmp56;
double tmp250 = 0.317*tmp65*tmp57*tmp77*tmp51*tmp40*tmp148*tmp118*tmp80;
double tmp251 = 1.268*tmp65*tmp57*tmp77*tmp35*tmp51*tmp111*tmp80;
double tmp252 = -0.634*tmp65*tmp57*tmp77*tmp133*tmp40*tmp111*tmp80;
double tmp253 = -0.317*tmp57*tmp116*tmp30*tmp148*tmp118*tmp55;
double tmp254 = -1.268*tmp57*tmp116*tmp22*tmp111*tmp55;
double tmp255 = 0.634*tmp57*tmp114*tmp30*tmp111*tmp55*tmp140;
double tmp256 = 0.317*tmp57*tmp69*tmp40*tmp111*tmp55*tmp151*tmp91;
double tmp257 = 0.634*tmp57*tmp69*tmp40*tmp137*tmp111*tmp123;
double tmp258 = -0.317*tmp57*tmp69*tmp40*tmp148*tmp118*tmp55*tmp123;
double tmp259 = -1.268*tmp57*tmp69*tmp35*tmp111*tmp55*tmp123;
double tmp260 = -0.634*tmp57*tmp77*tmp51*tmp40*tmp111*tmp80*tmp91*tmp143;
double tmp261 = 0.634*tmp57*tmp40*tmp111*tmp55*tmp123*tmp155;
double tmp262 = tmp248 + tmp249 + tmp250 + tmp251 + tmp252 + tmp253 + tmp254 + tmp255 + tmp256 + tmp257 + tmp258 + tmp259 + tmp260 + tmp261;
double tmp263 = 2*tmp195*tmp22;
double tmp264 = 4*tmp198*tmp25;
double tmp265 = 2*tmp193*tmp27;
double tmp266 = tmp263 + tmp264 + tmp265;
double tmp267 = -0.634*tmp57*tmp116*tmp40*tmp137*tmp111;
double tmp268 = -0.317*tmp65*tmp57*tmp77*tmp30*tmp51*tmp137*tmp111*tmp56;
double tmp269 = 0.317*tmp65*tmp57*tmp77*tmp30*tmp51*tmp148*tmp118*tmp80;
double tmp270 = -0.634*tmp65*tmp57*tmp77*tmp133*tmp30*tmp111*tmp80;
double tmp271 = 1.268*tmp65*tmp57*tmp77*tmp22*tmp51*tmp111*tmp80;
double tmp272 = 0.317*tmp57*tmp116*tmp40*tmp148*tmp118*tmp55;
double tmp273 = 1.268*tmp57*tmp116*tmp35*tmp111*tmp55;
double tmp274 = -0.634*tmp57*tmp114*tmp40*tmp111*tmp55*tmp140;
double tmp275 = 0.317*tmp57*tmp69*tmp30*tmp111*tmp55*tmp151*tmp91;
double tmp276 = 0.634*tmp57*tmp69*tmp30*tmp137*tmp111*tmp123;
double tmp277 = -0.317*tmp57*tmp69*tmp30*tmp148*tmp118*tmp55*tmp123;
double tmp278 = -1.268*tmp57*tmp69*tmp22*tmp111*tmp55*tmp123;
double tmp279 = -0.634*tmp57*tmp77*tmp30*tmp51*tmp111*tmp80*tmp91*tmp143;
double tmp280 = 0.634*tmp57*tmp30*tmp111*tmp55*tmp123*tmp155;
double tmp281 = tmp161*tmp162*tmp137;
double tmp282 = (tmp163*tmp128*tmp164*tmp137*tmp56*tmp165)/2.;
double tmp283 = tmp281 + tmp282;
double tmp284 = 1.268*tmp160*tmp283;
double tmp285 = tmp267 + tmp268 + tmp269 + tmp270 + tmp271 + tmp272 + tmp273 + tmp274 + tmp275 + tmp276 + tmp277 + tmp278 + tmp279 + tmp280 + tmp284;
double tmp286 = 0.317*tmp57*tmp69*tmp51*tmp170*tmp56;
double tmp287 = -1.268*tmp57*tmp69*tmp45*tmp80;
double tmp288 = 0.317*tmp65*tmp57*tmp77*tmp55*tmp180*tmp91;
double tmp289 = 0.634*tmp65*tmp57*tmp77*tmp170*tmp123;
double tmp290 = 0.634*tmp57*tmp77*tmp55*tmp176;
double tmp291 = 0.634*tmp57*tmp51*tmp80*tmp184;
double tmp292 = tmp286 + tmp287 + tmp288 + tmp289 + tmp290 + tmp291;
double tmp293 = 0.634*tmp57*tmp116*tmp30*tmp170*tmp111;
double tmp294 = -0.317*tmp65*tmp57*tmp77*tmp51*tmp40*tmp170*tmp111*tmp56;
double tmp295 = 0.317*tmp65*tmp57*tmp77*tmp51*tmp40*tmp177*tmp118*tmp80;
double tmp296 = -0.634*tmp65*tmp57*tmp77*tmp168*tmp51*tmp111*tmp80;
double tmp297 = 1.268*tmp65*tmp57*tmp77*tmp45*tmp40*tmp111*tmp80;
double tmp298 = -0.317*tmp57*tmp116*tmp30*tmp177*tmp118*tmp55;
double tmp299 = -1.268*tmp57*tmp116*tmp25*tmp111*tmp55;
double tmp300 = 0.634*tmp57*tmp114*tmp30*tmp111*tmp55*tmp173;
double tmp301 = 0.317*tmp57*tmp69*tmp40*tmp111*tmp55*tmp180*tmp91;
double tmp302 = 0.634*tmp57*tmp69*tmp40*tmp170*tmp111*tmp123;
double tmp303 = -0.317*tmp57*tmp69*tmp40*tmp177*tmp118*tmp55*tmp123;
double tmp304 = 0.634*tmp57*tmp69*tmp168*tmp111*tmp55*tmp123;
double tmp305 = -0.634*tmp57*tmp77*tmp51*tmp40*tmp111*tmp80*tmp91*tmp176;
double tmp306 = 0.634*tmp57*tmp40*tmp111*tmp55*tmp123*tmp184;
double tmp307 = tmp293 + tmp294 + tmp295 + tmp296 + tmp297 + tmp298 + tmp299 + tmp300 + tmp301 + tmp302 + tmp303 + tmp304 + tmp305 + tmp306;
double tmp308 = -0.634*tmp57*tmp116*tmp40*tmp170*tmp111;
double tmp309 = -0.317*tmp65*tmp57*tmp77*tmp30*tmp51*tmp170*tmp111*tmp56;
double tmp310 = 0.317*tmp65*tmp57*tmp77*tmp30*tmp51*tmp177*tmp118*tmp80;
double tmp311 = 1.268*tmp65*tmp57*tmp77*tmp45*tmp30*tmp111*tmp80;
double tmp312 = 1.268*tmp65*tmp57*tmp77*tmp25*tmp51*tmp111*tmp80;
double tmp313 = 0.317*tmp57*tmp116*tmp40*tmp177*tmp118*tmp55;
double tmp314 = -0.634*tmp57*tmp116*tmp168*tmp111*tmp55;
double tmp315 = -0.634*tmp57*tmp114*tmp40*tmp111*tmp55*tmp173;
double tmp316 = 0.317*tmp57*tmp69*tmp30*tmp111*tmp55*tmp180*tmp91;
double tmp317 = 0.634*tmp57*tmp69*tmp30*tmp170*tmp111*tmp123;
double tmp318 = -0.317*tmp57*tmp69*tmp30*tmp177*tmp118*tmp55*tmp123;
double tmp319 = -1.268*tmp57*tmp69*tmp25*tmp111*tmp55*tmp123;
double tmp320 = -0.634*tmp57*tmp77*tmp30*tmp51*tmp111*tmp80*tmp91*tmp176;
double tmp321 = 0.634*tmp57*tmp30*tmp111*tmp55*tmp123*tmp184;
double tmp322 = tmp161*tmp162*tmp170;
double tmp323 = (tmp163*tmp128*tmp164*tmp170*tmp56*tmp165)/2.;
double tmp324 = tmp322 + tmp323;
double tmp325 = 1.268*tmp160*tmp324;
double tmp326 = tmp308 + tmp309 + tmp310 + tmp311 + tmp312 + tmp313 + tmp314 + tmp315 + tmp316 + tmp317 + tmp318 + tmp319 + tmp320 + tmp321 + tmp325;
double tmp327 = tmp0*tmp1;
double tmp328 = tmp327 + tmp109;
double tmp329 = -(tmp0*tmp2);
double tmp330 = tmp329 + tmp197;
double tmp331 = tmp98 + tmp194 + tmp101 + tmp102;
double tmp332 = 4*tmp328*tmp43;
double tmp333 = 2*tmp331*tmp45;
double tmp334 = 2*tmp330*tmp46;
double tmp335 = tmp332 + tmp333 + tmp334;
double tmp336 = 4*tmp328*tmp32;
double tmp337 = 4*tmp330*tmp35;
double tmp338 = tmp331*tmp37;
double tmp339 = tmp336 + tmp337 + tmp338;
double tmp340 = 4*tmp330*tmp22;
double tmp341 = 2*tmp331*tmp25;
double tmp342 = 2*tmp328*tmp27;
double tmp343 = tmp340 + tmp341 + tmp342;
double tmp344 = ibd(2+_OFF);
double tmp345 = ibod(1+_OFF);
double tmp346 = ibd(3+_OFF);
double tmp347 = ibod(2+_OFF);
double tmp348 = ibod(3+_OFF);
double tmp349 = ibd(1+_OFF);
double tmp350 = cp(3+_OFF);
double tmp351 = mRoll(2+_OFF);
double tmp352 = mRoll(3+_OFF);
double tmp353 = x(37+_OFF);
double tmp354 = mRoll(4+_OFF);
double tmp355 = x(39+_OFF);
double tmp356 = tmp349*tmp344*tmp346;
double tmp357 = std::pow(tmp345,2);
double tmp358 = -(tmp344*tmp357);
double tmp359 = std::pow(tmp347,2);
double tmp360 = -(tmp346*tmp359);
double tmp361 = 2*tmp345*tmp347*tmp348;
double tmp362 = std::pow(tmp348,2);
double tmp363 = -(tmp349*tmp362);
double tmp364 = tmp356 + tmp358 + tmp360 + tmp361 + tmp363;
double tmp365 = 1/tmp364;
double tmp366 = cBar(1+_OFF);
double tmp367 = mPitch(3+_OFF);
double tmp368 = mPitch(4+_OFF);
double tmp369 = x(38+_OFF);
double tmp370 = mYaw(2+_OFF);
double tmp371 = mYaw(3+_OFF);
double tmp372 = -(tmp351*tmp91*tmp95);
double tmp373 = -(tmp350*tmp352*tmp75*tmp92*tmp353)/4.;
double tmp374 = (tmp350*tmp354*tmp75*tmp92*tmp355)/4.;
double tmp375 = tmp372 + tmp373 + tmp374;
double tmp376 = 0.634*tmp57*tmp350*tmp55*tmp375;
double tmp377 = -(tmp65*tmp351);
double tmp378 = (tmp350*tmp352*tmp56*tmp353)/2.;
double tmp379 = -(tmp350*tmp354*tmp56*tmp355)/2.;
double tmp380 = mRoll(1+_OFF);
double tmp381 = z(2+_OFF);
double tmp382 = tmp380*tmp381;
double tmp383 = tmp377 + tmp378 + tmp379 + tmp382;
double tmp384 = 0.634*tmp57*tmp350*tmp75*tmp383;
double tmp385 = tmp376 + tmp384;
double tmp386 = tmp367*tmp90;
double tmp387 = -(tmp366*tmp368*tmp75*tmp92*tmp369)/4.;
double tmp388 = tmp386 + tmp387;
double tmp389 = 0.634*tmp366*tmp57*tmp55*tmp388;
double tmp390 = mPitch(1+_OFF);
double tmp391 = -tmp390;
double tmp392 = tmp41*tmp367;
double tmp393 = (tmp366*tmp368*tmp56*tmp369)/2.;
double tmp394 = mPitch(2+_OFF);
double tmp395 = z(3+_OFF);
double tmp396 = -(tmp394*tmp395);
double tmp397 = tmp391 + tmp392 + tmp393 + tmp396;
double tmp398 = 0.634*tmp366*tmp57*tmp75*tmp397;
double tmp399 = tmp389 + tmp398;
double tmp400 = tmp345*tmp347;
double tmp401 = -(tmp349*tmp348);
double tmp402 = tmp400 + tmp401;
double tmp403 = tmp370*tmp91*tmp95;
double tmp404 = -(tmp350*tmp371*tmp75*tmp92*tmp355)/4.;
double tmp405 = tmp403 + tmp404;
double tmp406 = 0.634*tmp57*tmp350*tmp55*tmp405;
double tmp407 = tmp65*tmp370;
double tmp408 = (tmp350*tmp371*tmp56*tmp355)/2.;
double tmp409 = mYaw(1+_OFF);
double tmp410 = z(4+_OFF);
double tmp411 = -(tmp409*tmp410);
double tmp412 = tmp407 + tmp408 + tmp411;
double tmp413 = 0.634*tmp57*tmp350*tmp75*tmp412;
double tmp414 = tmp406 + tmp413;
double tmp415 = -(tmp346*tmp347);
double tmp416 = tmp345*tmp348;
double tmp417 = tmp415 + tmp416;
double tmp418 = -(tmp344*tmp345);
double tmp419 = tmp347*tmp348;
double tmp420 = tmp418 + tmp419;
double tmp421 = tmp349*tmp344;
double tmp422 = -tmp359;
double tmp423 = tmp421 + tmp422;
double tmp424 = -(tmp351*tmp91*tmp143);
double tmp425 = -(tmp350*tmp352*tmp137*tmp92*tmp353)/4.;
double tmp426 = (tmp350*tmp354*tmp137*tmp92*tmp355)/4.;
double tmp427 = tmp424 + tmp425 + tmp426;
double tmp428 = 0.634*tmp57*tmp350*tmp55*tmp427;
double tmp429 = 0.634*tmp57*tmp350*tmp137*tmp383;
double tmp430 = tmp428 + tmp429;
double tmp431 = tmp349*tmp346;
double tmp432 = -tmp357;
double tmp433 = tmp431 + tmp432;
double tmp434 = tmp367*tmp140;
double tmp435 = -(tmp366*tmp368*tmp137*tmp92*tmp369)/4.;
double tmp436 = tmp434 + tmp435;
double tmp437 = 0.634*tmp366*tmp57*tmp55*tmp436;
double tmp438 = 0.634*tmp366*tmp57*tmp137*tmp397;
double tmp439 = tmp437 + tmp438;
double tmp440 = tmp370*tmp91*tmp143;
double tmp441 = -(tmp350*tmp371*tmp137*tmp92*tmp355)/4.;
double tmp442 = tmp440 + tmp441;
double tmp443 = 0.634*tmp57*tmp350*tmp55*tmp442;
double tmp444 = 0.634*tmp57*tmp350*tmp137*tmp412;
double tmp445 = tmp443 + tmp444;
double tmp446 = tmp344*tmp346;
double tmp447 = -tmp362;
double tmp448 = tmp446 + tmp447;
double tmp449 = -(tmp351*tmp91*tmp176);
double tmp450 = -(tmp350*tmp352*tmp170*tmp92*tmp353)/4.;
double tmp451 = (tmp350*tmp354*tmp170*tmp92*tmp355)/4.;
double tmp452 = tmp449 + tmp450 + tmp451;
double tmp453 = 0.634*tmp57*tmp350*tmp55*tmp452;
double tmp454 = 0.634*tmp57*tmp350*tmp170*tmp383;
double tmp455 = tmp453 + tmp454;
double tmp456 = tmp367*tmp173;
double tmp457 = -(tmp366*tmp368*tmp170*tmp92*tmp369)/4.;
double tmp458 = tmp456 + tmp457;
double tmp459 = 0.634*tmp366*tmp57*tmp55*tmp458;
double tmp460 = 0.634*tmp366*tmp57*tmp170*tmp397;
double tmp461 = tmp459 + tmp460;
double tmp462 = tmp370*tmp91*tmp176;
double tmp463 = -(tmp350*tmp371*tmp170*tmp92*tmp355)/4.;
double tmp464 = tmp462 + tmp463;
double tmp465 = 0.634*tmp57*tmp350*tmp55*tmp464;
double tmp466 = 0.634*tmp57*tmp350*tmp170*tmp412;
double tmp467 = tmp465 + tmp466;
double tmp468 = tmp420*tmp365*tmp385;
double tmp469 = tmp402*tmp365*tmp399;
double tmp470 = tmp423*tmp365*tmp414;
double tmp471 = tmp468 + tmp469 + tmp470;
double tmp472 = tmp417*tmp365*tmp385;
double tmp473 = tmp433*tmp365*tmp399;
double tmp474 = tmp402*tmp365*tmp414;
double tmp475 = tmp472 + tmp473 + tmp474;
double tmp476 = tmp448*tmp365*tmp385;
double tmp477 = tmp417*tmp365*tmp399;
double tmp478 = tmp420*tmp365*tmp414;
double tmp479 = tmp476 + tmp477 + tmp478;
double tmp480 = tmp420*tmp365*tmp430;
double tmp481 = tmp402*tmp365*tmp439;
double tmp482 = tmp423*tmp365*tmp445;
double tmp483 = tmp480 + tmp481 + tmp482;
double tmp484 = tmp417*tmp365*tmp430;
double tmp485 = tmp433*tmp365*tmp439;
double tmp486 = tmp402*tmp365*tmp445;
double tmp487 = tmp484 + tmp485 + tmp486;
double tmp488 = tmp448*tmp365*tmp430;
double tmp489 = tmp417*tmp365*tmp439;
double tmp490 = tmp420*tmp365*tmp445;
double tmp491 = tmp488 + tmp489 + tmp490;
double tmp492 = tmp420*tmp365*tmp455;
double tmp493 = tmp402*tmp365*tmp461;
double tmp494 = tmp423*tmp365*tmp467;
double tmp495 = tmp492 + tmp493 + tmp494;
double tmp496 = tmp417*tmp365*tmp455;
double tmp497 = tmp433*tmp365*tmp461;
double tmp498 = tmp402*tmp365*tmp467;
double tmp499 = tmp496 + tmp497 + tmp498;
double tmp500 = tmp448*tmp365*tmp455;
double tmp501 = tmp417*tmp365*tmp461;
double tmp502 = tmp420*tmp365*tmp467;
double tmp503 = tmp500 + tmp501 + tmp502;
J(1+_OFF,1+_OFF) = -(tmp97*tmp132*tmp191) - tmp97*tmp147*tmp213 - tmp97*tmp159*tmp232;
J(1+_OFF,2+_OFF) = -(tmp97*tmp132*tmp243) - tmp97*tmp147*tmp262 - tmp97*tmp159*tmp285;
J(1+_OFF,3+_OFF) = -(tmp97*tmp132*tmp292) - tmp97*tmp147*tmp307 - tmp97*tmp159*tmp326;
J(2+_OFF,1+_OFF) = -(tmp97*tmp236*tmp191) - tmp97*tmp247*tmp213 - tmp97*tmp266*tmp232;
J(2+_OFF,2+_OFF) = -(tmp97*tmp236*tmp243) - tmp97*tmp247*tmp262 - tmp97*tmp266*tmp285;
J(2+_OFF,3+_OFF) = -(tmp97*tmp236*tmp292) - tmp97*tmp247*tmp307 - tmp97*tmp266*tmp326;
J(3+_OFF,1+_OFF) = -(tmp97*tmp335*tmp191) - tmp97*tmp339*tmp213 - tmp97*tmp343*tmp232;
J(3+_OFF,2+_OFF) = -(tmp97*tmp335*tmp243) - tmp97*tmp339*tmp262 - tmp97*tmp343*tmp285;
J(3+_OFF,3+_OFF) = -(tmp97*tmp335*tmp292) - tmp97*tmp339*tmp307 - tmp97*tmp343*tmp326;
J(4+_OFF,1+_OFF) = -(tmp147*tmp471) - tmp132*tmp475 - tmp159*tmp479;
J(4+_OFF,2+_OFF) = -(tmp147*tmp483) - tmp132*tmp487 - tmp159*tmp491;
J(4+_OFF,3+_OFF) = -(tmp147*tmp495) - tmp132*tmp499 - tmp159*tmp503;
J(5+_OFF,1+_OFF) = -(tmp247*tmp471) - tmp236*tmp475 - tmp266*tmp479;
J(5+_OFF,2+_OFF) = -(tmp247*tmp483) - tmp236*tmp487 - tmp266*tmp491;
J(5+_OFF,3+_OFF) = -(tmp247*tmp495) - tmp236*tmp499 - tmp266*tmp503;
J(6+_OFF,1+_OFF) = -(tmp339*tmp471) - tmp335*tmp475 - tmp343*tmp479;
J(6+_OFF,2+_OFF) = -(tmp339*tmp483) - tmp335*tmp487 - tmp343*tmp491;
J(6+_OFF,3+_OFF) = -(tmp339*tmp495) - tmp335*tmp499 - tmp343*tmp503;
