double tmp0 = r(2+_OFF);
double tmp1 = x(4+_OFF);
double tmp2 = r(3+_OFF);
double tmp3 = x(5+_OFF);
double tmp4 = r(1+_OFF);
double tmp5 = x(6+_OFF);
double tmp6 = x(7+_OFF);
double tmp7 = h(2+_OFF);
double tmp8 = h(3+_OFF);
double tmp9 = 2*tmp0*tmp1;
double tmp10 = -2*tmp2*tmp3;
double tmp11 = 2*tmp4*tmp6;
double tmp12 = tmp9 + tmp10 + tmp11;
double tmp13 = h(1+_OFF);
double tmp14 = 2*tmp2*tmp1;
double tmp15 = 2*tmp0*tmp3;
double tmp16 = -2*tmp4*tmp5;
double tmp17 = tmp14 + tmp15 + tmp16;
double tmp18 = 2*tmp4*tmp3;
double tmp19 = 2*tmp0*tmp5;
double tmp20 = 2*tmp2*tmp6;
double tmp21 = tmp18 + tmp19 + tmp20;
double tmp22 = 2*tmp4*tmp1;
double tmp23 = 2*tmp2*tmp5;
double tmp24 = -2*tmp0*tmp6;
double tmp25 = tmp22 + tmp23 + tmp24;
double tmp26 = r(5+_OFF);
double tmp27 = r(6+_OFF);
double tmp28 = r(4+_OFF);
double tmp29 = 2*tmp26*tmp1;
double tmp30 = -2*tmp27*tmp3;
double tmp31 = 2*tmp28*tmp6;
double tmp32 = tmp29 + tmp30 + tmp31;
double tmp33 = 2*tmp27*tmp1;
double tmp34 = 2*tmp26*tmp3;
double tmp35 = -2*tmp28*tmp5;
double tmp36 = tmp33 + tmp34 + tmp35;
double tmp37 = 2*tmp28*tmp3;
double tmp38 = 2*tmp26*tmp5;
double tmp39 = 2*tmp27*tmp6;
double tmp40 = tmp37 + tmp38 + tmp39;
double tmp41 = 2*tmp28*tmp1;
double tmp42 = 2*tmp27*tmp5;
double tmp43 = -2*tmp26*tmp6;
double tmp44 = tmp41 + tmp42 + tmp43;
double tmp45 = r(8+_OFF);
double tmp46 = r(9+_OFF);
double tmp47 = r(7+_OFF);
double tmp48 = 2*tmp45*tmp1;
double tmp49 = -2*tmp46*tmp3;
double tmp50 = 2*tmp47*tmp6;
double tmp51 = tmp48 + tmp49 + tmp50;
double tmp52 = 2*tmp46*tmp1;
double tmp53 = 2*tmp45*tmp3;
double tmp54 = -2*tmp47*tmp5;
double tmp55 = tmp52 + tmp53 + tmp54;
double tmp56 = 2*tmp47*tmp3;
double tmp57 = 2*tmp45*tmp5;
double tmp58 = 2*tmp46*tmp6;
double tmp59 = tmp56 + tmp57 + tmp58;
double tmp60 = 2*tmp47*tmp1;
double tmp61 = 2*tmp46*tmp5;
double tmp62 = -2*tmp45*tmp6;
double tmp63 = tmp60 + tmp61 + tmp62;
J(1+_OFF,1+_OFF) = tmp8*tmp17 + tmp7*tmp12 + tmp13*tmp25;
J(1+_OFF,2+_OFF) = tmp7*(-2*tmp2*tmp1 - 2*tmp0*tmp3 + 2*tmp4*tmp5) + tmp8*tmp12 + tmp13*tmp21;
J(1+_OFF,3+_OFF) = tmp13*tmp17 + tmp8*(-2*tmp4*tmp1 - 2*tmp2*tmp5 + 2*tmp0*tmp6) + tmp7*tmp21;
J(1+_OFF,4+_OFF) = tmp13*(-2*tmp0*tmp1 + 2*tmp2*tmp3 - 2*tmp4*tmp6) + tmp7*tmp25 + tmp8*tmp21;
J(2+_OFF,1+_OFF) = tmp8*tmp36 + tmp7*tmp32 + tmp13*tmp44;
J(2+_OFF,2+_OFF) = tmp7*(-2*tmp27*tmp1 - 2*tmp26*tmp3 + 2*tmp28*tmp5) + tmp8*tmp32 + tmp13*tmp40;
J(2+_OFF,3+_OFF) = tmp13*tmp36 + tmp8*(-2*tmp28*tmp1 - 2*tmp27*tmp5 + 2*tmp26*tmp6) + tmp7*tmp40;
J(2+_OFF,4+_OFF) = tmp13*(-2*tmp26*tmp1 + 2*tmp27*tmp3 - 2*tmp28*tmp6) + tmp7*tmp44 + tmp8*tmp40;
J(3+_OFF,1+_OFF) = tmp8*tmp55 + tmp7*tmp51 + tmp13*tmp63;
J(3+_OFF,2+_OFF) = tmp7*(-2*tmp46*tmp1 - 2*tmp45*tmp3 + 2*tmp47*tmp5) + tmp8*tmp51 + tmp13*tmp59;
J(3+_OFF,3+_OFF) = tmp13*tmp55 + tmp8*(-2*tmp47*tmp1 - 2*tmp46*tmp5 + 2*tmp45*tmp6) + tmp7*tmp59;
J(3+_OFF,4+_OFF) = tmp13*(-2*tmp45*tmp1 + 2*tmp46*tmp3 - 2*tmp47*tmp6) + tmp7*tmp63 + tmp8*tmp59;
