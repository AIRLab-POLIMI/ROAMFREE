double tmp0 = x(4+_OFF);
double tmp1 = x(6+_OFF);
double tmp2 = x(5+_OFF);
double tmp3 = x(7+_OFF);
double tmp4 = a(1+_OFF);
double tmp5 = ba(1+_OFF);
double tmp6 = -tmp5;
double tmp7 = tmp4 + tmp6;
double tmp8 = tmp2*tmp1;
double tmp9 = a(3+_OFF);
double tmp10 = ba(3+_OFF);
double tmp11 = -tmp10;
double tmp12 = tmp9 + tmp11;
double tmp13 = a(2+_OFF);
double tmp14 = ba(2+_OFF);
double tmp15 = -tmp14;
double tmp16 = tmp13 + tmp15;
double tmp17 = std::pow(tmp3,2);
double tmp18 = 2*tmp17;
double tmp19 = std::pow(tmp2,2);
double tmp20 = 2*tmp19;
double tmp21 = std::pow(tmp1,2);
double tmp22 = 2*tmp21;
double tmp23 = tmp2*tmp3;
double tmp24 = tmp1*tmp3;
double tmp25 = bw(1+_OFF);
double tmp26 = w(1+_OFF);
double tmp27 = bw(2+_OFF);
double tmp28 = w(2+_OFF);
double tmp29 = bw(3+_OFF);
double tmp30 = w(3+_OFF);
double tmp31 = std::pow(dt,2);
double tmp32 = std::pow(tmp25,2);
double tmp33 = std::pow(tmp27,2);
double tmp34 = std::pow(tmp29,2);
double tmp35 = -2*tmp25*tmp26;
double tmp36 = std::pow(tmp26,2);
double tmp37 = -2*tmp27*tmp28;
double tmp38 = std::pow(tmp28,2);
double tmp39 = -2*tmp29*tmp30;
double tmp40 = std::pow(tmp30,2);
double tmp41 = tmp32 + tmp33 + tmp34 + tmp35 + tmp36 + tmp37 + tmp38 + tmp39 + tmp40;
double tmp42 = tmp31*tmp41;
double tmp43 = 4 + tmp42;
double tmp44 = 1/std::sqrt(tmp43);
double tmp45 = -tmp28;
double tmp46 = tmp27 + tmp45;
double tmp47 = -tmp30;
double tmp48 = tmp29 + tmp47;
double tmp49 = -tmp25;
double tmp50 = tmp49 + tmp26;
double tmp51 = -tmp29;
double tmp52 = tmp51 + tmp30;
double tmp53 = -tmp27;
double tmp54 = tmp53 + tmp28;
double tmp55 = -tmp26;
double tmp56 = tmp25 + tmp55;
double tmp57 = -1 + tmp22 + tmp18;
double tmp58 = -tmp33;
double tmp59 = -tmp34;
double tmp60 = 2*tmp27*tmp28;
double tmp61 = -tmp38;
double tmp62 = 2*tmp29*tmp30;
double tmp63 = -tmp40;
double tmp64 = tmp32 + tmp58 + tmp59 + tmp35 + tmp36 + tmp60 + tmp61 + tmp62 + tmp63;
double tmp65 = tmp0*tmp1;
double tmp66 = tmp65 + tmp23;
double tmp67 = tmp32 + tmp33 + tmp59 + tmp35 + tmp36 + tmp37 + tmp38 + tmp62 + tmp63;
double tmp68 = -(tmp0*tmp3);
double tmp69 = tmp8 + tmp68;
double tmp70 = tmp32 + tmp58 + tmp34 + tmp35 + tmp36 + tmp60 + tmp61 + tmp39 + tmp40;
double tmp71 = -2*tmp21;
double tmp72 = -2*tmp17;
double tmp73 = 1 + tmp71 + tmp72;
double tmp74 = x(8+_OFF);
double tmp75 = 16 + tmp42;
double tmp76 = 1/tmp75;
double tmp77 = tmp48*tmp0*tmp3;
double tmp78 = -1 + tmp20 + tmp18;
double tmp79 = -tmp32;
double tmp80 = 2*tmp25*tmp26;
double tmp81 = -tmp36;
double tmp82 = 4*tmp56*tmp46*tmp0*tmp3;
double tmp83 = tmp0*tmp3;
double tmp84 = tmp8 + tmp83;
double tmp85 = tmp25*tmp27;
double tmp86 = -(tmp27*tmp26);
double tmp87 = -(tmp25*tmp28);
double tmp88 = tmp26*tmp28;
double tmp89 = -2*tmp56*tmp46*tmp17;
double tmp90 = tmp0*tmp2;
double tmp91 = -2*tmp19;
double tmp92 = 1 + tmp91 + tmp72;
double tmp93 = x(9+_OFF);
double tmp94 = -4*tmp25;
double tmp95 = 4*tmp26;
double tmp96 = dt*tmp46*tmp48;
double tmp97 = tmp94 + tmp95 + tmp96;
double tmp98 = tmp31*tmp70;
double tmp99 = -16 + tmp98;
double tmp100 = -1 + tmp20 + tmp22;
double tmp101 = tmp56*tmp0*tmp2;
double tmp102 = tmp46*tmp0*tmp1;
double tmp103 = -4*tmp56*tmp48*tmp0*tmp1;
double tmp104 = 4*tmp46*tmp48*tmp1*tmp3;
double tmp105 = -(tmp25*tmp29);
double tmp106 = tmp29*tmp26;
double tmp107 = tmp25*tmp30;
double tmp108 = -(tmp26*tmp30);
double tmp109 = 2*tmp56*tmp48*tmp21;
double tmp110 = tmp90 + tmp24;
double tmp111 = x(10+_OFF);
xnext(1+_OFF) = x(1+_OFF) + dt*((dt*(2*tmp16*tmp69 + 2*tmp12*tmp66 - tmp7*tmp57))/2. + tmp74);
xnext(2+_OFF) = x(2+_OFF) + dt*((dt*(2*tmp7*tmp84 + 2*tmp12*(-(tmp0*tmp2) + tmp24) - tmp16*tmp78))/2. + tmp93);
xnext(3+_OFF) = x(3+_OFF) + dt*((dt*(-(tmp12*tmp100) + 2*tmp7*(-(tmp0*tmp1) + tmp23) + 2*tmp16*tmp110))/2. + tmp111);
xnext(4+_OFF) = tmp44*(2*tmp0 + dt*(tmp56*tmp2 + tmp46*tmp1 + tmp48*tmp3));
xnext(5+_OFF) = tmp44*(dt*tmp50*tmp0 + 2*tmp2 + dt*tmp52*tmp1 + dt*tmp46*tmp3);
xnext(6+_OFF) = tmp44*(dt*tmp54*tmp0 + dt*tmp48*tmp2 + 2*tmp1 + dt*tmp50*tmp3);
xnext(7+_OFF) = tmp44*(dt*tmp52*tmp0 + dt*tmp54*tmp2 + dt*tmp56*tmp1 + 2*tmp3);
xnext(8+_OFF) = dt*tmp76*(-(tmp7*(-16*dt*(tmp102 + tmp52*tmp2*tmp1 + tmp77 + tmp46*tmp2*tmp3) + 16*tmp57 + tmp31*(tmp79 + tmp33 + tmp34 + tmp80 + tmp81 + tmp37 + tmp38 + tmp39 + tmp40 + tmp103 - 4*tmp56*tmp46*tmp2*tmp1 + 2*tmp64*tmp21 + tmp82 - 4*tmp56*tmp48*tmp2*tmp3 + 2*tmp64*tmp17))) - 2*tmp12*(-16*tmp66 + tmp31*(tmp105 + tmp106 + tmp107 + tmp108 + tmp67*tmp0*tmp1 - 2*tmp46*tmp48*tmp2*tmp1 + tmp109 + 2*tmp46*tmp48*tmp0*tmp3 + tmp67*tmp2*tmp3 + 2*tmp56*tmp48*tmp17) + 4*dt*(-2*tmp56*tmp69 + tmp27*tmp73 + tmp28*tmp57)) + 2*tmp16*(16*tmp69 + tmp31*(tmp85 + tmp86 + tmp87 + tmp88 + 2*tmp46*tmp48*tmp0*tmp1 - tmp70*tmp2*tmp1 - 2*tmp56*tmp46*tmp21 + tmp70*tmp0*tmp3 + 2*tmp46*tmp48*tmp2*tmp3 + tmp89) + 4*dt*(-2*tmp56*tmp66 + tmp29*tmp73 + tmp30*tmp57))) + tmp74;
xnext(9+_OFF) = dt*tmp76*(tmp16*(16*dt*(tmp101 + tmp48*tmp2*tmp1 + tmp77 + tmp50*tmp1*tmp3) - 16*tmp78 + tmp31*(tmp79 + tmp33 + tmp59 + tmp80 + tmp81 + tmp37 + tmp38 + tmp62 + tmp63 - 4*tmp46*tmp48*tmp0*tmp2 + 2*tmp70*tmp19 + 4*tmp56*tmp46*tmp2*tmp1 + tmp82 + tmp104 + 2*tmp70*tmp17)) + 2*tmp7*(16*tmp84 + tmp31*(tmp85 + tmp86 + tmp87 + tmp88 - 2*tmp56*tmp48*tmp0*tmp2 - 2*tmp56*tmp46*tmp19 + tmp64*tmp2*tmp1 + tmp64*tmp0*tmp3 + 2*tmp56*tmp48*tmp1*tmp3 + tmp89) + 4*dt*(-2*tmp46*(tmp90 - tmp1*tmp3) + tmp30*tmp92 + tmp29*tmp78)) + 2*tmp12*(-16*tmp0*tmp2 + 16*tmp1*tmp3 + tmp31*(tmp27*tmp29 - tmp29*tmp28 - tmp27*tmp30 + tmp28*tmp30 + tmp67*tmp0*tmp2 - 2*tmp46*tmp48*tmp19 + 2*tmp56*tmp48*tmp2*tmp1 + 2*tmp56*tmp48*tmp0*tmp3 - tmp67*tmp1*tmp3 - 2*tmp46*tmp48*tmp17) + 4*dt*(-2*tmp46*tmp84 + tmp25*tmp92 + tmp26*tmp78))) + tmp93;
xnext(10+_OFF) = dt*tmp76*(-2*tmp16*(4*dt*tmp25 - tmp31*tmp27*tmp29 - 4*dt*tmp26 + tmp31*tmp29*tmp28 + tmp31*tmp27*tmp30 - tmp31*tmp28*tmp30 + tmp99*tmp0*tmp2 + 2*dt*tmp97*tmp19 + 2*dt*(dt*tmp56*tmp46 + 4*tmp48)*tmp0*tmp1 + 2*dt*tmp97*tmp21 + 2*dt*(-4*tmp29 - dt*tmp56*tmp46 + 4*tmp30)*tmp2*tmp3 + tmp99*tmp1*tmp3) + tmp12*(-16*tmp100 + 16*dt*(tmp101 + tmp102 + tmp54*tmp2*tmp3 + tmp56*tmp1*tmp3) + tmp31*(tmp79 + tmp58 + tmp34 + tmp80 + tmp81 + tmp60 + tmp61 + tmp39 + tmp40 + 4*tmp46*tmp48*tmp0*tmp2 + 2*tmp67*tmp19 + tmp103 + 2*tmp67*tmp21 + 4*tmp56*tmp48*tmp2*tmp3 + tmp104)) + 2*tmp7*(-16*tmp0*tmp1 + 16*tmp2*tmp3 - tmp31*(tmp105 + tmp106 + tmp107 + tmp108 - 2*tmp56*tmp46*tmp0*tmp2 + 2*tmp56*tmp48*tmp19 + tmp64*tmp0*tmp1 + tmp109 + (tmp79 + tmp33 + tmp34 + tmp80 + tmp81 + tmp37 + tmp38 + tmp39 + tmp40)*tmp2*tmp3 - 2*tmp56*tmp46*tmp1*tmp3) + 4*dt*(tmp27*(1 + tmp91 + tmp71) + tmp28*tmp100 - 2*tmp48*tmp110))) + tmp111;
